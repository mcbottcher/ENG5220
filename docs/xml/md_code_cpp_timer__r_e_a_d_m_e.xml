<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="md_code_cpp_timer__r_e_a_d_m_e" kind="page">
    <compoundname>md_code_cppTimer_README</compoundname>
    <title>CppTimer</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Generic C++ <ref refid="class_timer" kindref="compound">Timer</ref> for Linux</para>
<para>It&apos;s a wrapper around the Linux timers. There are two ways of using the timer: by overloading the <computeroutput>timerEvent()</computeroutput> method in the <computeroutput><ref refid="class_cpp_timer" kindref="compound">CppTimer</ref></computeroutput> class itself (fastest) or by registering a callback class called <computeroutput>Runnable</computeroutput> with an overloaded <computeroutput>run()</computeroutput> method.</para>
<para>## Installation <programlisting><codeline><highlight class="normal">cmake<sp/>.</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>make<sp/>install</highlight></codeline>
</programlisting></para>
<para><heading level="2">Usage (overloading the timer event)</heading>
</para>
<para>Include <ref refid="_cpp_timer_8h" kindref="compound">CppTimer.h</ref> in your program and link the static library <computeroutput>libcpptimer.a</computeroutput> to your project:</para>
<para><programlisting><codeline><highlight class="normal">TARGET_LINK_LIBRARIES(your_project_title<sp/>cpptimer<sp/>rt)</highlight></codeline>
</programlisting></para>
<para>### Create the <ref refid="class_timer" kindref="compound">Timer</ref> class <programlisting><codeline><highlight class="normal">class<sp/>MyTimer<sp/>:<sp/>public<sp/>CppTimer<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>timerEvent()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>your<sp/>timer<sp/>event<sp/>code<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> where you override <computeroutput>timerEvent</computeroutput> with your function.</para>
<para><heading level="3">Run the <ref refid="class_timer" kindref="compound">Timer</ref> class</heading>
</para>
<para>The timer is programmed in nanoseconds. <programlisting><codeline><highlight class="normal">MyTimer<sp/>myTimer;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>every<sp/>500000ns</highlight></codeline>
<codeline><highlight class="normal">myTimer.start(500000);</highlight></codeline>
</programlisting> As soon as start returns the timer fires instantly and then at the specified interval.</para>
<para><heading level="3">Demo program</heading>
</para>
<para>To run <computeroutput><ref refid="demo_8cpp" kindref="compound">demo.cpp</ref></computeroutput> just do <computeroutput>cmake .</computeroutput>, <computeroutput>make</computeroutput> and then <computeroutput>./demo</computeroutput>.</para>
<para><heading level="2">Callback version</heading>
</para>
<para>Instead of overloading the <computeroutput>run()</computeroutput> method in the timer class you can overload the <computeroutput>run()</computeroutput> method in the <computeroutput>Runnable</computeroutput> class and then register this class with the timer class. Check out <computeroutput>demo_runnable</computeroutput> which demonstrates how to use this method.</para>
<para><heading level="2">Unit tests</heading>
</para>
<para>Run:</para>
<para><programlisting><codeline><highlight class="normal">ctest</highlight></codeline>
</programlisting></para>
<para>That&apos;s it. Enjoy! </para>
    </detaileddescription>
  </compounddef>
</doxygen>
