<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_m_p_u6050" kind="class" language="C++" prot="public">
    <compoundname>MPU6050</compoundname>
    <includes refid="_m_p_u6050_8h" local="no">MPU6050.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_m_p_u6050_1ad248bbf6e9da395ab67f7049b50ae474" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::devAddr</definition>
        <argsstring></argsstring>
        <name>devAddr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="983" column="1" bodyfile="code/MPU6050/MPU6050.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_m_p_u6050_1ad2000cad671bb7b293e26f2d463d4cea" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::buffer[14]</definition>
        <argsstring>[14]</argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="984" column="1" bodyfile="code/MPU6050/MPU6050.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_m_p_u6050_1a7c0146d45537e4bd7a0d4c1c476fdab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MPU6050::MPU6050</definition>
        <argsstring>()</argsstring>
        <name>MPU6050</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, uses default I2C address. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae5cf60bf2cbc13d21384c215c4f05149" kindref="member">MPU6050_DEFAULT_ADDRESS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="404" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a94df4ec1565317ba5279122b3bf7e056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MPU6050::MPU6050</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>MPU6050</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specific address constructor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae5cf60bf2cbc13d21384c215c4f05149" kindref="member">MPU6050_DEFAULT_ADDRESS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ad9c8593ecb6f9a2865b8080add402cc6" kindref="member">MPU6050_ADDRESS_AD0_LOW</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ad6e414ff4b69bb789ac93215a28c8d9c" kindref="member">MPU6050_ADDRESS_AD0_HIGH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="405" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1abd8fc6c18adf158011118fbccc7e7054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Power on and prepare for general usage. This will activate the device and take it out of sleep mode (which must be done after start-up). This function also sets both the accelerometer and the gyroscope to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets the clock source to use the X Gyro for reference, which is slightly better than the default internal clock source. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="407" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a95ffab7b44fce3834236e0813687d11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::testConnection</definition>
        <argsstring>()</argsstring>
        <name>testConnection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify the I2C connection. Make sure the device is connected and responds as expected. <simplesect kind="return"><para>True if connection is valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="408" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af6e9af8e2222889fd5458e2ae12c55c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getAuxVDDIOLevel</definition>
        <argsstring>()</argsstring>
        <name>getAuxVDDIOLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the auxiliary I2C supply voltage level. When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to the MPU-6000, which does not have a VLOGIC pin. <simplesect kind="return"><para>I2C supply voltage level (0=VLOGIC, 1=VDD) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="411" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7c666c20e26869bc80646f1b2c3d69bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setAuxVDDIOLevel</definition>
        <argsstring>(uint8_t level)</argsstring>
        <name>setAuxVDDIOLevel</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the auxiliary I2C supply voltage level. When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to the MPU-6000, which does not have a VLOGIC pin. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C supply voltage level (0=VLOGIC, 1=VDD) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="412" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a887a173e079980505763ffd1aa9fec05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getRate</definition>
        <argsstring>()</argsstring>
        <name>getRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get gyroscope output rate divider. The sensor register output, FIFO output, DMP sampling, Motion detection, Zero Motion detection, and Free Fall detection are all based on the Sample Rate. The Sample Rate is generated by dividing the gyroscope output rate by SMPLRT_DIV:</para>
<para>Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)</para>
<para>where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or 7), and 1kHz when the DLPF is enabled (see Register 26).</para>
<para>Note: The accelerometer output rate is 1kHz. This means that for a Sample Rate greater than 1kHz, the same accelerometer sample may be output to the FIFO, DMP, and sensor registers more than once.</para>
<para>For a diagram of the gyroscope and accelerometer signal paths, see Section 8 of the MPU-6000/MPU-6050 Product Specification document.</para>
<para><simplesect kind="return"><para>Current sample rate </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a12d24140bc78ba2db5a2e11ab32abeda" kindref="member">MPU6050_RA_SMPLRT_DIV</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="415" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7d03801d6b656e8e12cd3c1dd97824a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setRate</definition>
        <argsstring>(uint8_t rate)</argsstring>
        <name>setRate</name>
        <param>
          <type>uint8_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set gyroscope sample rate divider. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>New sample rate divider </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a887a173e079980505763ffd1aa9fec05" kindref="member">getRate()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a12d24140bc78ba2db5a2e11ab32abeda" kindref="member">MPU6050_RA_SMPLRT_DIV</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="416" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a902a7d486cd6ac21f8c378634dc6f59a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getExternalFrameSync</definition>
        <argsstring>()</argsstring>
        <name>getExternalFrameSync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get external FSYNC configuration. Configures the external Frame Synchronization (FSYNC) pin sampling. An external signal connected to the FSYNC pin can be sampled by configuring EXT_SYNC_SET. Signal changes to the FSYNC pin are latched so that short strobes may be captured. The latched FSYNC signal will be sampled at the Sampling Rate, as defined in register 25. After sampling, the latch will reset to the current FSYNC signal state.</para>
<para>The sampled value will be reported in place of the least significant bit in a sensor data register determined by the value of EXT_SYNC_SET according to the following table.</para>
<para><preformatted>
EXT_SYNC_SET | FSYNC Bit Location
-------------+-------------------
0            | Input disabled
1            | TEMP_OUT_L[0]
2            | GYRO_XOUT_L[0]
3            | GYRO_YOUT_L[0]
4            | GYRO_ZOUT_L[0]
5            | ACCEL_XOUT_L[0]
6            | ACCEL_YOUT_L[0]
7            | ACCEL_ZOUT_L[0]
</preformatted></para>
<para><simplesect kind="return"><para>FSYNC configuration value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="419" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a77b36f41c531a11b5a835fc75a9aefe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setExternalFrameSync</definition>
        <argsstring>(uint8_t sync)</argsstring>
        <name>setExternalFrameSync</name>
        <param>
          <type>uint8_t</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set external FSYNC configuration. <simplesect kind="see"><para><ref refid="class_m_p_u6050_1a902a7d486cd6ac21f8c378634dc6f59a" kindref="member">getExternalFrameSync()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a51c78b27e0368d91c94209dbeca4df90" kindref="member">MPU6050_RA_CONFIG</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>New FSYNC configuration value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="420" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9f2737fe22955fd85b2575ba8da874c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getDLPFMode</definition>
        <argsstring>()</argsstring>
        <name>getDLPFMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get digital low-pass filter configuration. The DLPF_CFG parameter sets the digital low pass filter configuration. It also determines the internal sampling rate used by the device as shown in the table below.</para>
<para>Note: The accelerometer output rate is 1kHz. This means that for a Sample Rate greater than 1kHz, the same accelerometer sample may be output to the FIFO, DMP, and sensor registers more than once.</para>
<para><preformatted>
         |   ACCELEROMETER    |           GYROSCOPE
DLPF_CFG | Bandwidth | Delay  | Bandwidth | Delay  | Sample Rate
---------+-----------+--------+-----------+--------+-------------
0        | 260Hz     | 0ms    | 256Hz     | 0.98ms | 8kHz
1        | 184Hz     | 2.0ms  | 188Hz     | 1.9ms  | 1kHz
2        | 94Hz      | 3.0ms  | 98Hz      | 2.8ms  | 1kHz
3        | 44Hz      | 4.9ms  | 42Hz      | 4.8ms  | 1kHz
4        | 21Hz      | 8.5ms  | 20Hz      | 8.3ms  | 1kHz
5        | 10Hz      | 13.8ms | 10Hz      | 13.4ms | 1kHz
6        | 5Hz       | 19.0ms | 5Hz       | 18.6ms | 1kHz
7        |   -- Reserved --   |   -- Reserved --   | Reserved
</preformatted></para>
<para><simplesect kind="return"><para>DLFP configuration </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a51c78b27e0368d91c94209dbeca4df90" kindref="member">MPU6050_RA_CONFIG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1adf909a696e2ebf9ba3dba9570ae02af2" kindref="member">MPU6050_CFG_DLPF_CFG_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a119feeb54b957c50e0beba3f6aa2458f" kindref="member">MPU6050_CFG_DLPF_CFG_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="421" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7a782ade8af2f88dfef7171487f59a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setDLPFMode</definition>
        <argsstring>(uint8_t bandwidth)</argsstring>
        <name>setDLPFMode</name>
        <param>
          <type>uint8_t</type>
          <declname>bandwidth</declname>
          <defname>mode</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set digital low-pass filter configuration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>New DLFP configuration setting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>getDLPFBandwidth() </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a69e8618585558f2ef5cec3116726ca60" kindref="member">MPU6050_DLPF_BW_256</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a51c78b27e0368d91c94209dbeca4df90" kindref="member">MPU6050_RA_CONFIG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1adf909a696e2ebf9ba3dba9570ae02af2" kindref="member">MPU6050_CFG_DLPF_CFG_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a119feeb54b957c50e0beba3f6aa2458f" kindref="member">MPU6050_CFG_DLPF_CFG_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="422" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1acb1fa088d43d76230106a3226f343013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getFullScaleGyroRange</definition>
        <argsstring>()</argsstring>
        <name>getFullScaleGyroRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get full-scale gyroscope range. The FS_SEL parameter allows setting the full-scale range of the gyro sensors, as described in the table below.</para>
<para><preformatted>
0 = +/- 250 degrees/sec
1 = +/- 500 degrees/sec
2 = +/- 1000 degrees/sec
3 = +/- 2000 degrees/sec
</preformatted></para>
<para><simplesect kind="return"><para>Current full-scale gyroscope range setting </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aac5b35a3fa5792b38fe7118bc72fb442" kindref="member">MPU6050_GYRO_FS_250</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a004871ad77398075d79e9111989007dc" kindref="member">MPU6050_RA_GYRO_CONFIG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1afd6d2bc756768007166a6c3941569c80" kindref="member">MPU6050_GCONFIG_FS_SEL_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9ffad45588f9e6c49842bbe8c57335f6" kindref="member">MPU6050_GCONFIG_FS_SEL_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="425" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a72afc0b6f221c9336f635b5637c62dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFullScaleGyroRange</definition>
        <argsstring>(uint8_t range)</argsstring>
        <name>setFullScaleGyroRange</name>
        <param>
          <type>uint8_t</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set full-scale gyroscope range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>New full-scale gyroscope range value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>getFullScaleRange() </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aac5b35a3fa5792b38fe7118bc72fb442" kindref="member">MPU6050_GYRO_FS_250</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a004871ad77398075d79e9111989007dc" kindref="member">MPU6050_RA_GYRO_CONFIG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1afd6d2bc756768007166a6c3941569c80" kindref="member">MPU6050_GCONFIG_FS_SEL_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9ffad45588f9e6c49842bbe8c57335f6" kindref="member">MPU6050_GCONFIG_FS_SEL_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="426" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8fc7eab1302281f6e4bc953379f3237b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getAccelXSelfTest</definition>
        <argsstring>()</argsstring>
        <name>getAccelXSelfTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get self-test enabled setting for accelerometer X axis. <simplesect kind="return"><para>Self-test enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="429" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac2ab843dc9d241056ed0f891195cdbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setAccelXSelfTest</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAccelXSelfTest</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get self-test enabled setting for accelerometer X axis. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Self-test enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="430" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2523e798db3baf9cb9dbf347af16639b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getAccelYSelfTest</definition>
        <argsstring>()</argsstring>
        <name>getAccelYSelfTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get self-test enabled value for accelerometer Y axis. <simplesect kind="return"><para>Self-test enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="431" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad5847430ab297959e4d0e9b81ba2e3ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setAccelYSelfTest</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAccelYSelfTest</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get self-test enabled value for accelerometer Y axis. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Self-test enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="432" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a57710638eeb6176cf14a8c444bda5300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getAccelZSelfTest</definition>
        <argsstring>()</argsstring>
        <name>getAccelZSelfTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get self-test enabled value for accelerometer Z axis. <simplesect kind="return"><para>Self-test enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="433" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8eb8ba039af9a47e0475a3835b87f404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setAccelZSelfTest</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAccelZSelfTest</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set self-test enabled value for accelerometer Z axis. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Self-test enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="434" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a0fe2dad60c170cee7d614e08f243ffd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getFullScaleAccelRange</definition>
        <argsstring>()</argsstring>
        <name>getFullScaleAccelRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get full-scale accelerometer range. The FS_SEL parameter allows setting the full-scale range of the accelerometer sensors, as described in the table below.</para>
<para><preformatted>
0 = +/- 2g
1 = +/- 4g
2 = +/- 8g
3 = +/- 16g
</preformatted></para>
<para><simplesect kind="return"><para>Current full-scale accelerometer range setting </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aeb63b8456cc4d715ce1fbe29ca5b1722" kindref="member">MPU6050_ACCEL_FS_2</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a86a744acedbe8a5ec7c82792e050d911" kindref="member">MPU6050_ACONFIG_AFS_SEL_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac2d0f6933b5cee0ffe5bc049eb54536f" kindref="member">MPU6050_ACONFIG_AFS_SEL_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="435" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a64eb78e8e359c541beaf8664db3421d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFullScaleAccelRange</definition>
        <argsstring>(uint8_t range)</argsstring>
        <name>setFullScaleAccelRange</name>
        <param>
          <type>uint8_t</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set full-scale accelerometer range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>New full-scale accelerometer range setting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a0fe2dad60c170cee7d614e08f243ffd0" kindref="member">getFullScaleAccelRange()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="436" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4c3b84a906fcb5a65870fa557f797f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getDHPFMode</definition>
        <argsstring>()</argsstring>
        <name>getDHPFMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the high-pass filter configuration. The DHPF is a filter module in the path leading to motion detectors (Free Fall, Motion threshold, and Zero Motion). The high pass filter output is not available to the data registers (see Figure in Section 8 of the MPU-6000/ MPU-6050 Product Specification document).</para>
<para>The high pass filter has three modes:</para>
<para><preformatted>
   Reset: The filter output settles to zero within one sample. This
          effectively disables the high pass filter. This mode may be toggled
          to quickly settle the filter.</preformatted></para>
<para><preformatted>   On:    The high pass filter will pass signals above the cut off frequency.</preformatted></para>
<para><preformatted>   Hold:  When triggered, the filter holds the present sample. The filter
          output will be the difference between the input sample and the held
          sample.
</preformatted></para>
<para><preformatted>
ACCEL_HPF | <ref refid="class_filter" kindref="compound">Filter</ref> Mode | Cut-off Frequency
----------+-------------+------------------
0         | Reset       | None
1         | On          | 5Hz
2         | On          | 2.5Hz
3         | On          | 1.25Hz
4         | On          | 0.63Hz
7         | Hold        | None
</preformatted></para>
<para><simplesect kind="return"><para>Current high-pass filter configuration </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa27e7511d60ab2f0d99b4bb138539e25" kindref="member">MPU6050_DHPF_RESET</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="437" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a44cc43aaad1e52c1ba3142d4490af611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setDHPFMode</definition>
        <argsstring>(uint8_t mode)</argsstring>
        <name>setDHPFMode</name>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
          <defname>bandwidth</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the high-pass filter configuration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bandwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>New high-pass filter configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a44cc43aaad1e52c1ba3142d4490af611" kindref="member">setDHPFMode()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa27e7511d60ab2f0d99b4bb138539e25" kindref="member">MPU6050_DHPF_RESET</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a48b7d7b24a70b247e373bc5965a5dcc7" kindref="member">MPU6050_RA_ACCEL_CONFIG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="438" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="381" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac7f5c0511fe9d0f3525a3757498daed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getFreefallDetectionThreshold</definition>
        <argsstring>()</argsstring>
        <name>getFreefallDetectionThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get free-fall event acceleration threshold. This register configures the detection threshold for Free Fall event detection. The unit of FF_THR is 1LSB = 2mg. Free Fall is detected when the absolute value of the accelerometer measurements for the three axes are each less than the detection threshold. This condition increments the Free Fall duration counter (Register 30). The Free Fall interrupt is triggered when the Free Fall duration counter reaches the time specified in FF_DUR.</para>
<para>For more details on the Free Fall detection interrupt, see Section 8.2 of the MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and 58 of this document.</para>
<para><simplesect kind="return"><para>Current free-fall acceleration threshold value (LSB = 2mg) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a391a4a95c33895c6926b9459cea5f3cd" kindref="member">MPU6050_RA_FF_THR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="441" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af704e1a4eb01522b146abeba78c32716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFreefallDetectionThreshold</definition>
        <argsstring>(uint8_t threshold)</argsstring>
        <name>setFreefallDetectionThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get free-fall event acceleration threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>New free-fall acceleration threshold value (LSB = 2mg) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ac7f5c0511fe9d0f3525a3757498daed7" kindref="member">getFreefallDetectionThreshold()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a391a4a95c33895c6926b9459cea5f3cd" kindref="member">MPU6050_RA_FF_THR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="442" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="411" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3cff6b9613ad01aa1a51c287f5c5e329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getFreefallDetectionDuration</definition>
        <argsstring>()</argsstring>
        <name>getFreefallDetectionDuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get free-fall event duration threshold. This register configures the duration counter threshold for Free Fall event detection. The duration counter ticks at 1kHz, therefore FF_DUR has a unit of 1 LSB = 1 ms.</para>
<para>The Free Fall duration counter increments while the absolute value of the accelerometer measurements are each less than the detection threshold (Register 29). The Free Fall interrupt is triggered when the Free Fall duration counter reaches the time specified in this register.</para>
<para>For more details on the Free Fall detection interrupt, see Section 8.2 of the MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and 58 of this document.</para>
<para><simplesect kind="return"><para>Current free-fall duration threshold value (LSB = 1ms) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aaf242278f1dd87556bdeeab589b01fd7" kindref="member">MPU6050_RA_FF_DUR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="445" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a41eeb40a654465966d260e3d31c4de4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFreefallDetectionDuration</definition>
        <argsstring>(uint8_t duration)</argsstring>
        <name>setFreefallDetectionDuration</name>
        <param>
          <type>uint8_t</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get free-fall event duration threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>New free-fall duration threshold value (LSB = 1ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a3cff6b9613ad01aa1a51c287f5c5e329" kindref="member">getFreefallDetectionDuration()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aaf242278f1dd87556bdeeab589b01fd7" kindref="member">MPU6050_RA_FF_DUR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="446" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ab7a825b1b8b86cebda308289630795e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getMotionDetectionThreshold</definition>
        <argsstring>()</argsstring>
        <name>getMotionDetectionThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get motion detection event acceleration threshold. This register configures the detection threshold for Motion interrupt generation. The unit of MOT_THR is 1LSB = 2mg. Motion is detected when the absolute value of any of the accelerometer measurements exceeds this Motion detection threshold. This condition increments the Motion detection duration counter (Register 32). The Motion detection interrupt is triggered when the Motion Detection counter reaches the time count specified in MOT_DUR (Register 32).</para>
<para>The Motion interrupt will indicate the axis and polarity of detected motion in MOT_DETECT_STATUS (Register 97).</para>
<para>For more details on the Motion detection interrupt, see Section 8.3 of the MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and 58 of this document.</para>
<para><simplesect kind="return"><para>Current motion detection acceleration threshold value (LSB = 2mg) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a444c7d6d710bcc30f1ad98f703f9921e" kindref="member">MPU6050_RA_MOT_THR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="449" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aa23c8d66502345c30915e69975fd2cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMotionDetectionThreshold</definition>
        <argsstring>(uint8_t threshold)</argsstring>
        <name>setMotionDetectionThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set free-fall event acceleration threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>New motion detection acceleration threshold value (LSB = 2mg) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ab7a825b1b8b86cebda308289630795e7" kindref="member">getMotionDetectionThreshold()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a444c7d6d710bcc30f1ad98f703f9921e" kindref="member">MPU6050_RA_MOT_THR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="450" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="477" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8ba035c2ae4a05d7e51b0d29e4924fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getMotionDetectionDuration</definition>
        <argsstring>()</argsstring>
        <name>getMotionDetectionDuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get motion detection event duration threshold. This register configures the duration counter threshold for Motion interrupt generation. The duration counter ticks at 1 kHz, therefore MOT_DUR has a unit of 1LSB = 1ms. The Motion detection duration counter increments when the absolute value of any of the accelerometer measurements exceeds the Motion detection threshold (Register 31). The Motion detection interrupt is triggered when the Motion detection counter reaches the time count specified in this register.</para>
<para>For more details on the Motion detection interrupt, see Section 8.3 of the MPU-6000/MPU-6050 Product Specification document.</para>
<para><simplesect kind="return"><para>Current motion detection duration threshold value (LSB = 1ms) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a25ce9fe346237d22b62881257458fdf4" kindref="member">MPU6050_RA_MOT_DUR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="453" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6d81616aaa47539217057891c91ff08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMotionDetectionDuration</definition>
        <argsstring>(uint8_t duration)</argsstring>
        <name>setMotionDetectionDuration</name>
        <param>
          <type>uint8_t</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set motion detection event duration threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>New motion detection duration threshold value (LSB = 1ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a8ba035c2ae4a05d7e51b0d29e4924fb0" kindref="member">getMotionDetectionDuration()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a25ce9fe346237d22b62881257458fdf4" kindref="member">MPU6050_RA_MOT_DUR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="454" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="507" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad941c1e844dc9230675c115734599ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getZeroMotionDetectionThreshold</definition>
        <argsstring>()</argsstring>
        <name>getZeroMotionDetectionThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get zero motion detection event acceleration threshold. This register configures the detection threshold for Zero Motion interrupt generation. The unit of ZRMOT_THR is 1LSB = 2mg. Zero Motion is detected when the absolute value of the accelerometer measurements for the 3 axes are each less than the detection threshold. This condition increments the Zero Motion duration counter (Register 34). The Zero Motion interrupt is triggered when the Zero Motion duration counter reaches the time count specified in ZRMOT_DUR (Register 34).</para>
<para>Unlike Free Fall or Motion detection, Zero Motion detection triggers an interrupt both when Zero Motion is first detected and when Zero Motion is no longer detected.</para>
<para>When a zero motion event is detected, a Zero Motion Status will be indicated in the MOT_DETECT_STATUS register (Register 97). When a motion-to-zero-motion condition is detected, the status bit is set to 1. When a zero-motion-to- motion condition is detected, the status bit is set to 0.</para>
<para>For more details on the Zero Motion detection interrupt, see Section 8.4 of the MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and 58 of this document.</para>
<para><simplesect kind="return"><para>Current zero motion detection acceleration threshold value (LSB = 2mg) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a866eb43544165dc8c777d82bab9860e6" kindref="member">MPU6050_RA_ZRMOT_THR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="457" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="538" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a347a51fd25de20b9ead4659015ef793b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZeroMotionDetectionThreshold</definition>
        <argsstring>(uint8_t threshold)</argsstring>
        <name>setZeroMotionDetectionThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set zero motion detection event acceleration threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>New zero motion detection acceleration threshold value (LSB = 2mg) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ad941c1e844dc9230675c115734599ea3" kindref="member">getZeroMotionDetectionThreshold()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a866eb43544165dc8c777d82bab9860e6" kindref="member">MPU6050_RA_ZRMOT_THR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="458" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="547" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a04c0fcdcd0157b6dbf74d4901424801e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getZeroMotionDetectionDuration</definition>
        <argsstring>()</argsstring>
        <name>getZeroMotionDetectionDuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get zero motion detection event duration threshold. This register configures the duration counter threshold for Zero Motion interrupt generation. The duration counter ticks at 16 Hz, therefore ZRMOT_DUR has a unit of 1 LSB = 64 ms. The Zero Motion duration counter increments while the absolute value of the accelerometer measurements are each less than the detection threshold (Register 33). The Zero Motion interrupt is triggered when the Zero Motion duration counter reaches the time count specified in this register.</para>
<para>For more details on the Zero Motion detection interrupt, see Section 8.4 of the MPU-6000/MPU-6050 Product Specification document, as well as Registers 56 and 58 of this document.</para>
<para><simplesect kind="return"><para>Current zero motion detection duration threshold value (LSB = 64ms) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a57ad8b9e0c77ec27d41b60405ab57e1c" kindref="member">MPU6050_RA_ZRMOT_DUR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="461" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6d25a21e1673682f096399b719c66d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZeroMotionDetectionDuration</definition>
        <argsstring>(uint8_t duration)</argsstring>
        <name>setZeroMotionDetectionDuration</name>
        <param>
          <type>uint8_t</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set zero motion detection event duration threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>New zero motion detection duration threshold value (LSB = 1ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a04c0fcdcd0157b6dbf74d4901424801e" kindref="member">getZeroMotionDetectionDuration()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a57ad8b9e0c77ec27d41b60405ab57e1c" kindref="member">MPU6050_RA_ZRMOT_DUR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="462" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="578" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a913c2095001e204b5b09f8382a86d2ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getTempFIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getTempFIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get temperature FIFO enabled value. When set to 1, this bit enables TEMP_OUT_H and TEMP_OUT_L (Registers 65 and 66) to be written into the FIFO buffer. <simplesect kind="return"><para>Current temperature FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="465" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae528a25b4997ad0e3091a012e4e4419e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setTempFIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setTempFIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set temperature FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New temperature FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a913c2095001e204b5b09f8382a86d2ca" kindref="member">getTempFIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="466" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="599" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ada9a553176b57815f23fb7d71bb85c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getXGyroFIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getXGyroFIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get gyroscope X-axis FIFO enabled value. When set to 1, this bit enables GYRO_XOUT_H and GYRO_XOUT_L (Registers 67 and 68) to be written into the FIFO buffer. <simplesect kind="return"><para>Current gyroscope X-axis FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="467" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a53a03d1f255a62f01375c870cdc85767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setXGyroFIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setXGyroFIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set gyroscope X-axis FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New gyroscope X-axis FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ada9a553176b57815f23fb7d71bb85c9d" kindref="member">getXGyroFIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="468" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="617" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a86c85d5b5c93df82394435b868e17463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getYGyroFIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getYGyroFIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get gyroscope Y-axis FIFO enabled value. When set to 1, this bit enables GYRO_YOUT_H and GYRO_YOUT_L (Registers 69 and 70) to be written into the FIFO buffer. <simplesect kind="return"><para>Current gyroscope Y-axis FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="469" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="626" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a16eb12bbf07bc17a9d852941d834175e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setYGyroFIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setYGyroFIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set gyroscope Y-axis FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New gyroscope Y-axis FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a86c85d5b5c93df82394435b868e17463" kindref="member">getYGyroFIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="470" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="635" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1adbbbd131c74f37dd545403633eb317ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getZGyroFIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getZGyroFIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get gyroscope Z-axis FIFO enabled value. When set to 1, this bit enables GYRO_ZOUT_H and GYRO_ZOUT_L (Registers 71 and 72) to be written into the FIFO buffer. <simplesect kind="return"><para>Current gyroscope Z-axis FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="471" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="644" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af5b5bc39b66466ba910f6eef1259444c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZGyroFIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setZGyroFIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set gyroscope Z-axis FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New gyroscope Z-axis FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1adbbbd131c74f37dd545403633eb317ff" kindref="member">getZGyroFIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="472" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="653" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ace244415128ad7a38293ad6808b7face" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getAccelFIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getAccelFIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get accelerometer FIFO enabled value. When set to 1, this bit enables ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ACCEL_YOUT_L, ACCEL_ZOUT_H, and ACCEL_ZOUT_L (Registers 59 to 64) to be written into the FIFO buffer. <simplesect kind="return"><para>Current accelerometer FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="473" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="663" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1afccbee85f5cdc95098f6d62d8d417c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setAccelFIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAccelFIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set accelerometer FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New accelerometer FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ace244415128ad7a38293ad6808b7face" kindref="member">getAccelFIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="474" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="672" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3c2e29508607a655221a2fa4f4219b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave2FIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSlave2FIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 2 FIFO enabled value. When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96) associated with Slave 2 to be written into the FIFO buffer. <simplesect kind="return"><para>Current Slave 2 FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="475" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="681" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a38a10ac4f30b96718ec021dc0db8587b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave2FIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlave2FIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Slave 2 FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New Slave 2 FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a3c2e29508607a655221a2fa4f4219b4d" kindref="member">getSlave2FIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="476" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="690" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1afd6a9b55a589c83c9a0fb0b5b2a88234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave1FIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSlave1FIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 1 FIFO enabled value. When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96) associated with Slave 1 to be written into the FIFO buffer. <simplesect kind="return"><para>Current Slave 1 FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="477" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="699" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a5d432fa2fb8b2227f50aa5c7b5befb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave1FIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlave1FIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Slave 1 FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New Slave 1 FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1afd6a9b55a589c83c9a0fb0b5b2a88234" kindref="member">getSlave1FIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="478" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="708" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6aa7aa2e3fac06f8b5ab9ee127255a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave0FIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSlave0FIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 0 FIFO enabled value. When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96) associated with Slave 0 to be written into the FIFO buffer. <simplesect kind="return"><para>Current Slave 0 FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="479" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="717" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a97fbf27e1b827f9dfc3c28ff376b54c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave0FIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlave0FIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Slave 0 FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New Slave 0 FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a6aa7aa2e3fac06f8b5ab9ee127255a5e" kindref="member">getSlave0FIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1166fe50f4792f3266e15dc3273e375d" kindref="member">MPU6050_RA_FIFO_EN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="480" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="726" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aa88483068837bd9bc9c9f6c59a7a79b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getMultiMasterEnabled</definition>
        <argsstring>()</argsstring>
        <name>getMultiMasterEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get multi-master enabled value. Multi-master capability allows multiple I2C masters to operate on the same bus. In circuits where multi-master capability is required, set MULT_MST_EN to 1. This will increase current drawn by approximately 30uA.</para>
<para>In circuits where multi-master capability is required, the state of the I2C bus must always be monitored by each separate I2C Master. Before an I2C Master can assume arbitration of the bus, it must first confirm that no other I2C Master has arbitration of the bus. When MULT_MST_EN is set to 1, the MPU-60X0&apos;s bus arbitration detection logic is turned on, enabling it to detect when the bus is available.</para>
<para><simplesect kind="return"><para>Current multi-master enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="483" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="747" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a039f5724974c5bf3f373ed9be031441c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMultiMasterEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setMultiMasterEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set multi-master enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New multi-master enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1aa88483068837bd9bc9c9f6c59a7a79b7" kindref="member">getMultiMasterEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="484" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="756" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4e2ebda47b85b4c5463f041c790bf5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getWaitForExternalSensorEnabled</definition>
        <argsstring>()</argsstring>
        <name>getWaitForExternalSensorEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get wait-for-external-sensor-data enabled value. When the WAIT_FOR_ES bit is set to 1, the Data Ready interrupt will be delayed until External Sensor data from the Slave Devices are loaded into the EXT_SENS_DATA registers. This is used to ensure that both the internal sensor data (i.e. from gyro and accel) and external sensor data have been loaded to their respective data registers (i.e. the data is synced) when the Data Ready interrupt is triggered.</para>
<para><simplesect kind="return"><para>Current wait-for-external-sensor-data enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="485" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a20dc4bdedbe1550580c28a6d090291be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setWaitForExternalSensorEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setWaitForExternalSensorEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set wait-for-external-sensor-data enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New wait-for-external-sensor-data enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a4e2ebda47b85b4c5463f041c790bf5c0" kindref="member">getWaitForExternalSensorEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="486" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="779" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9d75ec63e2320ecfb84a2b082397f900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave3FIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSlave3FIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 3 FIFO enabled value. When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96) associated with Slave 3 to be written into the FIFO buffer. <simplesect kind="return"><para>Current Slave 3 FIFO enabled value </para>
</simplesect>
<simplesect kind="see"><para>MPU6050_RA_MST_CTRL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="487" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="788" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6ed713870c7f6d085ded91a45515a36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave3FIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlave3FIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Slave 3 FIFO enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New Slave 3 FIFO enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a9d75ec63e2320ecfb84a2b082397f900" kindref="member">getSlave3FIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para>MPU6050_RA_MST_CTRL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="488" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="797" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6b3c3aab80fcaa384303f9df2a59d7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlaveReadWriteTransitionEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSlaveReadWriteTransitionEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get slave read/write transition enabled value. The I2C_MST_P_NSR bit configures the I2C Master&apos;s transition from one slave read to the next slave read. If the bit equals 0, there will be a restart between reads. If the bit equals 1, there will be a stop followed by a start of the following read. When a write transaction follows a read transaction, the stop followed by a start of the successive write will be always used.</para>
<para><simplesect kind="return"><para>Current slave read/write transition enabled value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="489" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="810" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3413efbf2f4e8a27aa8768d9bc34d663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveReadWriteTransitionEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlaveReadWriteTransitionEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set slave read/write transition enabled value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New slave read/write transition enabled value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a6b3c3aab80fcaa384303f9df2a59d7eb" kindref="member">getSlaveReadWriteTransitionEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="490" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="819" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4cda448ef5c5736bd14188947342d636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getMasterClockSpeed</definition>
        <argsstring>()</argsstring>
        <name>getMasterClockSpeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get I2C master clock speed. I2C_MST_CLK is a 4 bit unsigned value which configures a divider on the MPU-60X0 internal 8MHz clock. It sets the I2C master clock speed according to the following table:</para>
<para><preformatted>
I2C_MST_CLK | I2C Master Clock Speed | 8MHz Clock Divider
------------+------------------------+-------------------
0           | 348kHz                 | 23
1           | 333kHz                 | 24
2           | 320kHz                 | 25
3           | 308kHz                 | 26
4           | 296kHz                 | 27
5           | 286kHz                 | 28
6           | 276kHz                 | 29
7           | 267kHz                 | 30
8           | 258kHz                 | 31
9           | 500kHz                 | 16
10          | 471kHz                 | 17
11          | 444kHz                 | 18
12          | 421kHz                 | 19
13          | 400kHz                 | 20
14          | 381kHz                 | 21
15          | 364kHz                 | 22
</preformatted></para>
<para><simplesect kind="return"><para>Current I2C master clock speed </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="491" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="851" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8a4779ea709ff0633f9798369478400b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMasterClockSpeed</definition>
        <argsstring>(uint8_t speed)</argsstring>
        <name>setMasterClockSpeed</name>
        <param>
          <type>uint8_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set I2C master clock speed. @reparam speed Current I2C master clock speed <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae4804708dd5f21dbca1ff1815b883504" kindref="member">MPU6050_RA_I2C_MST_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="492" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="859" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af75b9f7ccac48515c7544238db0e6863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlaveAddress</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the I2C address of the specified slave (0-3). Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it&apos;s a read operation, and if it is cleared, then it&apos;s a write operation. The remaining bits (6-0) are the 7-bit device address of the slave device.</para>
<para>In read mode, the result of the read is placed in the lowest available EXT_SENS_DATA register. For further information regarding the allocation of read results, please refer to the EXT_SENS_DATA register description (Registers 73 - 96).</para>
<para>The MPU-6050 supports a total of five slaves, but Slave 4 has unique characteristics, and so it has its own functions (getSlave4* and setSlave4*).</para>
<para>I2C data transactions are performed at the Sample Rate, as defined in Register 25. The user is responsible for ensuring that I2C data transactions to and from each enabled Slave can be completed within a single period of the Sample Rate.</para>
<para>The I2C slave access rate can be reduced relative to the Sample Rate. This reduced access rate is determined by I2C_MST_DLY (Register 52). Whether a slave&apos;s access rate is reduced relative to the Sample Rate is determined by I2C_MST_DELAY_CTRL (Register 103).</para>
<para>The processing order for the slaves is fixed. The sequence followed for processing the slaves is Slave 0, Slave 1, Slave 2, Slave 3 and Slave 4. If a particular Slave is disabled it will be skipped.</para>
<para>Each slave can either be accessed at the sample rate or at a reduced sample rate. In a case where some slaves are accessed at the Sample Rate and some slaves are accessed at the reduced rate, the sequence of accessing the slaves (Slave 0 to Slave 4) is still followed. However, the reduced rate slaves will be skipped if their access rate dictates that they should not be accessed during that particular cycle. For further information regarding the reduced access rate, please refer to Register 52. Whether a slave is accessed at the Sample Rate or at the reduced rate is determined by the Delay Enable bits in Register 103.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current address for specified slave </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a423463fce914683217f05e3ca686364c" kindref="member">MPU6050_RA_I2C_SLV0_ADDR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="495" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="906" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3c07eb2c59fff3ddc7186319ee40ba6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveAddress</definition>
        <argsstring>(uint8_t num, uint8_t address)</argsstring>
        <name>setSlaveAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the I2C address of the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>New address for specified slave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1af75b9f7ccac48515c7544238db0e6863" kindref="member">getSlaveAddress()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a423463fce914683217f05e3ca686364c" kindref="member">MPU6050_RA_I2C_SLV0_ADDR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="496" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="917" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae7e9ead9645bcef326eb579c6ab5d5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlaveRegister</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveRegister</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the active internal register for the specified slave (0-3). Read/write operations for this slave will be done to whatever internal register address is stored in this MPU register.</para>
<para>The MPU-6050 supports a total of five slaves, but Slave 4 has unique characteristics, and so it has its own functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current active register for specified slave </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae9fc1bc0eb0c568846328de91127ca80" kindref="member">MPU6050_RA_I2C_SLV0_REG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="497" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="932" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a62851e982059a2462d52c210ad764a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveRegister</definition>
        <argsstring>(uint8_t num, uint8_t reg)</argsstring>
        <name>setSlaveRegister</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the active internal register for the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>New active register for specified slave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ae7e9ead9645bcef326eb579c6ab5d5ff" kindref="member">getSlaveRegister()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae9fc1bc0eb0c568846328de91127ca80" kindref="member">MPU6050_RA_I2C_SLV0_REG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="498" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="943" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a5f14bde83fe00b27dec6776fc44e89c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlaveEnabled</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveEnabled</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the enabled value for the specified slave (0-3). When set to 1, this bit enables Slave 0 for data transfer operations. When cleared to 0, this bit disables Slave 0 from data transfer operations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current enabled value for specified slave </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="499" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="954" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1afaffa021d7bb41f3a288827080602eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveEnabled</definition>
        <argsstring>(uint8_t num, bool enabled)</argsstring>
        <name>setSlaveEnabled</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the enabled value for the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New enabled value for specified slave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a5f14bde83fe00b27dec6776fc44e89c2" kindref="member">getSlaveEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="500" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="965" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a18e8f3d053a68f0e5ecf497c87ecac8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlaveWordByteSwap</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveWordByteSwap</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get word pair byte-swapping enabled for the specified slave (0-3). When set to 1, this bit enables byte swapping. When byte swapping is enabled, the high and low bytes of a word pair are swapped. Please refer to I2C_SLV0_GRP for the pairing convention of the word pairs. When cleared to 0, bytes transferred to and from Slave 0 will be written to EXT_SENS_DATA registers in the order they were transferred.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current word pair byte-swapping enabled value for specified slave </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="501" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="980" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1abeb1f83652066d7543fd3283af794364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveWordByteSwap</definition>
        <argsstring>(uint8_t num, bool enabled)</argsstring>
        <name>setSlaveWordByteSwap</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set word pair byte-swapping enabled for the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New word pair byte-swapping enabled value for specified slave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a18e8f3d053a68f0e5ecf497c87ecac8a" kindref="member">getSlaveWordByteSwap()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="502" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="991" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1adb99955fa66300b1f0bedfcdd8187412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlaveWriteMode</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveWriteMode</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get write mode for the specified slave (0-3). When set to 1, the transaction will read or write data only. When cleared to 0, the transaction will write a register address prior to reading or writing data. This should equal 0 when specifying the register address within the Slave device to/from which the ensuing data transaction will take place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current write mode for specified slave (0 = register address + data, 1 = data only) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="503" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1005" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3d9bfcb5394c7a382009cd2dc91ce801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveWriteMode</definition>
        <argsstring>(uint8_t num, bool mode)</argsstring>
        <name>setSlaveWriteMode</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set write mode for the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>New write mode for specified slave (0 = register address + data, 1 = data only) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1adb99955fa66300b1f0bedfcdd8187412" kindref="member">getSlaveWriteMode()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="504" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1016" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a32ce8023bb80afc5d55811de70c7214f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlaveWordGroupOffset</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveWordGroupOffset</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get word pair grouping order offset for the specified slave (0-3). This sets specifies the grouping order of word pairs received from registers. When cleared to 0, bytes from register addresses 0 and 1, 2 and 3, etc (even, then odd register addresses) are paired to form a word. When set to 1, bytes from register addresses are paired 1 and 2, 3 and 4, etc. (odd, then even register addresses) are paired to form a word.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current word pair grouping order offset for specified slave </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="505" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1031" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a32602ab86f70b70d3313628fc6c010ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveWordGroupOffset</definition>
        <argsstring>(uint8_t num, bool enabled)</argsstring>
        <name>setSlaveWordGroupOffset</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set word pair grouping order offset for the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New word pair grouping order offset for specified slave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a32ce8023bb80afc5d55811de70c7214f" kindref="member">getSlaveWordGroupOffset()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="506" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1042" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a54c2a48b3cb79106bcaf75accf6cd311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlaveDataLength</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveDataLength</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of bytes to read for the specified slave (0-3). Specifies the number of bytes transferred to and from Slave 0. Clearing this bit to 0 is equivalent to disabling the register by writing 0 to I2C_SLV0_EN. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes to read for specified slave </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="507" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1053" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ab4151353f433c533246d938fc3b78458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveDataLength</definition>
        <argsstring>(uint8_t num, uint8_t length)</argsstring>
        <name>setSlaveDataLength</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set number of bytes to read for the specified slave (0-3). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read for specified slave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a54c2a48b3cb79106bcaf75accf6cd311" kindref="member">getSlaveDataLength()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a70ce4d71982a1e3fb2be9b71f40da786" kindref="member">MPU6050_RA_I2C_SLV0_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="508" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1064" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4278dec5fec25be9a6f45b51a3373ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlave4Address</definition>
        <argsstring>()</argsstring>
        <name>getSlave4Address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the I2C address of Slave 4. Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it&apos;s a read operation, and if it is cleared, then it&apos;s a write operation. The remaining bits (6-0) are the 7-bit device address of the slave device.</para>
<para><simplesect kind="return"><para>Current address for Slave 4 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1af75b9f7ccac48515c7544238db0e6863" kindref="member">getSlaveAddress()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a3a3a4854870a5f354e50fbc4eae196c0" kindref="member">MPU6050_RA_I2C_SLV4_ADDR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="511" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1080" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6985da2cbc37be3fefbe3c16bf8d34a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4Address</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>setSlave4Address</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the I2C address of Slave 4. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>New address for Slave 4 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a4278dec5fec25be9a6f45b51a3373ad2" kindref="member">getSlave4Address()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a3a3a4854870a5f354e50fbc4eae196c0" kindref="member">MPU6050_RA_I2C_SLV4_ADDR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="512" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1089" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7bd548cb60ecceb27c72f026ec0a60f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlave4Register</definition>
        <argsstring>()</argsstring>
        <name>getSlave4Register</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the active internal register for the Slave 4. Read/write operations for this slave will be done to whatever internal register address is stored in this MPU register.</para>
<para><simplesect kind="return"><para>Current active register for Slave 4 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b2f24136f2f68b5d42652d16208d9d0" kindref="member">MPU6050_RA_I2C_SLV4_REG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="513" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1099" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae54dc358da048e61a1ac68012300fdaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4Register</definition>
        <argsstring>(uint8_t reg)</argsstring>
        <name>setSlave4Register</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the active internal register for Slave 4. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>New active register for Slave 4 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a7bd548cb60ecceb27c72f026ec0a60f8" kindref="member">getSlave4Register()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b2f24136f2f68b5d42652d16208d9d0" kindref="member">MPU6050_RA_I2C_SLV4_REG</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="514" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1108" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a17147a6f477be79f58889e9e6329392f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4OutputByte</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>setSlave4OutputByte</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set new byte to write to Slave 4. This register stores the data to be written into the Slave 4. If I2C_SLV4_RW is set 1 (set to read), this register has no effect. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>New byte to write to Slave 4 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a433e4202ff24b4d90e695d5154a6f9eb" kindref="member">MPU6050_RA_I2C_SLV4_DO</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="515" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1117" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4b9e13d6776ba99e042773873557bedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave4Enabled</definition>
        <argsstring>()</argsstring>
        <name>getSlave4Enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the enabled value for the Slave 4. When set to 1, this bit enables Slave 4 for data transfer operations. When cleared to 0, this bit disables Slave 4 from data transfer operations. <simplesect kind="return"><para>Current enabled value for Slave 4 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="516" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1126" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a04be2a8c3af6ef174f97769b9b5164a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4Enabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlave4Enabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the enabled value for Slave 4. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New enabled value for Slave 4 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a4b9e13d6776ba99e042773873557bedd" kindref="member">getSlave4Enabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="517" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1135" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a051549bcfa2eeb848c8557fc3efe74da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave4InterruptEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSlave4InterruptEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the enabled value for Slave 4 transaction interrupts. When set to 1, this bit enables the generation of an interrupt signal upon completion of a Slave 4 transaction. When cleared to 0, this bit disables the generation of an interrupt signal upon completion of a Slave 4 transaction. The interrupt status can be observed in Register 54.</para>
<para><simplesect kind="return"><para>Current enabled value for Slave 4 transaction interrupts. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="518" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1147" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7d7498ebc26f8a1fe8c9dcf40cd5d265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4InterruptEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSlave4InterruptEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the enabled value for Slave 4 transaction interrupts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New enabled value for Slave 4 transaction interrupts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a051549bcfa2eeb848c8557fc3efe74da" kindref="member">getSlave4InterruptEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="519" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1156" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8d5a5e73907c78960154b92656127372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave4WriteMode</definition>
        <argsstring>()</argsstring>
        <name>getSlave4WriteMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get write mode for Slave 4. When set to 1, the transaction will read or write data only. When cleared to 0, the transaction will write a register address prior to reading or writing data. This should equal 0 when specifying the register address within the Slave device to/from which the ensuing data transaction will take place.</para>
<para><simplesect kind="return"><para>Current write mode for Slave 4 (0 = register address + data, 1 = data only) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="520" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1168" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af1402fe7f3e1cc0dedb6714351cbca4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4WriteMode</definition>
        <argsstring>(bool mode)</argsstring>
        <name>setSlave4WriteMode</name>
        <param>
          <type>bool</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set write mode for the Slave 4. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>New write mode for Slave 4 (0 = register address + data, 1 = data only) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a8d5a5e73907c78960154b92656127372" kindref="member">getSlave4WriteMode()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="521" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1177" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9a4585b3c9e61478db198011107a56a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlave4MasterDelay</definition>
        <argsstring>()</argsstring>
        <name>getSlave4MasterDelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 4 master delay value. This configures the reduced access rate of I2C slaves relative to the Sample Rate. When a slave&apos;s access rate is decreased relative to the Sample Rate, the slave is accessed every: <verbatim>1 / (1 + I2C_MST_DLY) samples
</verbatim></para>
<para>This base Sample Rate in turn is determined by SMPLRT_DIV (register 25) and DLPF_CFG (register 26). Whether a slave&apos;s access rate is reduced relative to the Sample Rate is determined by I2C_MST_DELAY_CTRL (register 103). For further information regarding the Sample Rate, please refer to register 25.</para>
<para><simplesect kind="return"><para>Current Slave 4 master delay value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="522" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1195" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac154934a43c599cdc564fb29c22c45eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlave4MasterDelay</definition>
        <argsstring>(uint8_t delay)</argsstring>
        <name>setSlave4MasterDelay</name>
        <param>
          <type>uint8_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Slave 4 master delay value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>New Slave 4 master delay value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a9a4585b3c9e61478db198011107a56a9" kindref="member">getSlave4MasterDelay()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2b6fbfceb145ba1c8b19f51475fd7a5d" kindref="member">MPU6050_RA_I2C_SLV4_CTRL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="523" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1204" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9bc93f34bc3d85cbe6010b4a3a88c5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getSlate4InputByte</definition>
        <argsstring>()</argsstring>
        <name>getSlate4InputByte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get last available byte read from Slave 4. This register stores the data read from Slave 4. This field is populated after a read transaction. <simplesect kind="return"><para>Last available byte read from to Slave 4 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a80d3591c47d0482c0adcf176e1994a65" kindref="member">MPU6050_RA_I2C_SLV4_DI</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="524" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1213" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af2820067b73f177d985ed81e894281b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getPassthroughStatus</definition>
        <argsstring>()</argsstring>
        <name>getPassthroughStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get FSYNC interrupt status. This bit reflects the status of the FSYNC interrupt from an external device into the MPU-60X0. This is used as a way to pass an external interrupt through the MPU-60X0 to the host application processor. When set to 1, this bit will cause an interrupt if FSYNC_INT_EN is asserted in INT_PIN_CFG (Register 55). <simplesect kind="return"><para>FSYNC interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="527" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1229" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a105aefe645e7021f9ba4397e9df4114c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave4IsDone</definition>
        <argsstring>()</argsstring>
        <name>getSlave4IsDone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 4 transaction done status. Automatically sets to 1 when a Slave 4 transaction has completed. This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted and if the SLV_4_DONE_INT bit is asserted in the I2C_SLV4_CTRL register (Register 52). <simplesect kind="return"><para>Slave 4 transaction done status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="528" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1241" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1acd775c72f85dabfc6f8fba43da096c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getLostArbitration</definition>
        <argsstring>()</argsstring>
        <name>getLostArbitration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get master arbitration lost status. This bit automatically sets to 1 when the I2C Master has lost arbitration of the auxiliary I2C bus (an error condition). This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted. <simplesect kind="return"><para>Master arbitration lost status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="529" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1252" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae9882b425cbdced4de325b608d896e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave4Nack</definition>
        <argsstring>()</argsstring>
        <name>getSlave4Nack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 4 NACK status. This bit automatically sets to 1 when the I2C Master receives a NACK in a transaction with Slave 4. This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted. <simplesect kind="return"><para>Slave 4 NACK interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="530" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1263" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a55f24d2f2b13d6e28a7c8b6bf2913520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave3Nack</definition>
        <argsstring>()</argsstring>
        <name>getSlave3Nack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 3 NACK status. This bit automatically sets to 1 when the I2C Master receives a NACK in a transaction with Slave 3. This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted. <simplesect kind="return"><para>Slave 3 NACK interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="531" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1274" bodyend="1277"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af4b5101dab501d6df2e0cae909120771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave2Nack</definition>
        <argsstring>()</argsstring>
        <name>getSlave2Nack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 2 NACK status. This bit automatically sets to 1 when the I2C Master receives a NACK in a transaction with Slave 2. This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted. <simplesect kind="return"><para>Slave 2 NACK interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="532" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1285" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a65cc9d75ff347b146414685fb83fa451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave1Nack</definition>
        <argsstring>()</argsstring>
        <name>getSlave1Nack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 1 NACK status. This bit automatically sets to 1 when the I2C Master receives a NACK in a transaction with Slave 1. This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted. <simplesect kind="return"><para>Slave 1 NACK interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="533" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1296" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a74511edfcada3fb21c3327a0c846c72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlave0Nack</definition>
        <argsstring>()</argsstring>
        <name>getSlave0Nack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Slave 0 NACK status. This bit automatically sets to 1 when the I2C Master receives a NACK in a transaction with Slave 0. This triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted. <simplesect kind="return"><para>Slave 0 NACK interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5ef54580f436c198fb84d01288fbef49" kindref="member">MPU6050_RA_I2C_MST_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="534" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1307" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a58da1dfb39eb34e3a09a9b0bf4d87f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getInterruptMode</definition>
        <argsstring>()</argsstring>
        <name>getInterruptMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get interrupt logic level mode. Will be set 0 for active-high, 1 for active-low. <simplesect kind="return"><para>Current interrupt mode (0=active-high, 1=active-low) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a0ca358b8171fd08fd631434ee8ff2339" kindref="member">MPU6050_INTCFG_INT_LEVEL_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="537" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1320" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a003a098a1521c5ef4df50c0a8a2d47ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setInterruptMode</definition>
        <argsstring>(bool mode)</argsstring>
        <name>setInterruptMode</name>
        <param>
          <type>bool</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set interrupt logic level mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt mode (0=active-high, 1=active-low) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a58da1dfb39eb34e3a09a9b0bf4d87f29" kindref="member">getInterruptMode()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a0ca358b8171fd08fd631434ee8ff2339" kindref="member">MPU6050_INTCFG_INT_LEVEL_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="538" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1330" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af66e6c7b1885dcf452e73371790fddfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getInterruptDrive</definition>
        <argsstring>()</argsstring>
        <name>getInterruptDrive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get interrupt drive mode. Will be set 0 for push-pull, 1 for open-drain. <simplesect kind="return"><para>Current interrupt drive mode (0=push-pull, 1=open-drain) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae8cef0becbc209ac15fea3d86261d324" kindref="member">MPU6050_INTCFG_INT_OPEN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="539" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1339" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9d9d6aeea346e6f6fad8e4a428cf3301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setInterruptDrive</definition>
        <argsstring>(bool drive)</argsstring>
        <name>setInterruptDrive</name>
        <param>
          <type>bool</type>
          <declname>drive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set interrupt drive mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drive</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt drive mode (0=push-pull, 1=open-drain) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1af66e6c7b1885dcf452e73371790fddfd" kindref="member">getInterruptDrive()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae8cef0becbc209ac15fea3d86261d324" kindref="member">MPU6050_INTCFG_INT_OPEN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="540" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1349" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a5502c4c2a9bc4ea9267e128b7743923d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getInterruptLatch</definition>
        <argsstring>()</argsstring>
        <name>getInterruptLatch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get interrupt latch mode. Will be set 0 for 50us-pulse, 1 for latch-until-int-cleared. <simplesect kind="return"><para>Current latch mode (0=50us-pulse, 1=latch-until-int-cleared) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5704a7815c0fa6dcbfd4666a70e89d90" kindref="member">MPU6050_INTCFG_LATCH_INT_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="541" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1358" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1abf9ccf9eb6c7156e6660abb76734920a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setInterruptLatch</definition>
        <argsstring>(bool latch)</argsstring>
        <name>setInterruptLatch</name>
        <param>
          <type>bool</type>
          <declname>latch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set interrupt latch mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>latch</parametername>
</parameternamelist>
<parameterdescription>
<para>New latch mode (0=50us-pulse, 1=latch-until-int-cleared) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a5502c4c2a9bc4ea9267e128b7743923d" kindref="member">getInterruptLatch()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5704a7815c0fa6dcbfd4666a70e89d90" kindref="member">MPU6050_INTCFG_LATCH_INT_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="542" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1368" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9a098a607e20c64b60e155da35b8264f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getInterruptLatchClear</definition>
        <argsstring>()</argsstring>
        <name>getInterruptLatchClear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get interrupt latch clear mode. Will be set 0 for status-read-only, 1 for any-register-read. <simplesect kind="return"><para>Current latch clear mode (0=status-read-only, 1=any-register-read) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a45b83ab5dc3f439636f6e5c591f1d5b1" kindref="member">MPU6050_INTCFG_INT_RD_CLEAR_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="543" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1377" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2fa64c7030242aac18bd6727e8ca4a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setInterruptLatchClear</definition>
        <argsstring>(bool clear)</argsstring>
        <name>setInterruptLatchClear</name>
        <param>
          <type>bool</type>
          <declname>clear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set interrupt latch clear mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clear</parametername>
</parameternamelist>
<parameterdescription>
<para>New latch clear mode (0=status-read-only, 1=any-register-read) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a9a098a607e20c64b60e155da35b8264f" kindref="member">getInterruptLatchClear()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a45b83ab5dc3f439636f6e5c591f1d5b1" kindref="member">MPU6050_INTCFG_INT_RD_CLEAR_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="544" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1387" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a60fc85d4f27f99d07ffb9543d5e5f347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getFSyncInterruptLevel</definition>
        <argsstring>()</argsstring>
        <name>getFSyncInterruptLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get FSYNC interrupt logic level mode. <simplesect kind="return"><para>Current FSYNC interrupt mode (0=active-high, 1=active-low) </para>
</simplesect>
<simplesect kind="see"><para>getFSyncInterruptMode() </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1696357738f5b7e4bc50ec4170be3324" kindref="member">MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="545" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1396" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2b1c75cfc29e8ff8205f4ff33a426716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFSyncInterruptLevel</definition>
        <argsstring>(bool level)</argsstring>
        <name>setFSyncInterruptLevel</name>
        <param>
          <type>bool</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set FSYNC interrupt logic level mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>New FSYNC interrupt mode (0=active-high, 1=active-low) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>getFSyncInterruptMode() </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1696357738f5b7e4bc50ec4170be3324" kindref="member">MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="546" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1406" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4c01f9ab83b64dbbc6b62e658c3d3d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getFSyncInterruptEnabled</definition>
        <argsstring>()</argsstring>
        <name>getFSyncInterruptEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get FSYNC pin interrupt enabled setting. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled setting </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a39963ea6d8b9cbeebc4daf40f8872fed" kindref="member">MPU6050_INTCFG_FSYNC_INT_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="547" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1415" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a96aa409e02cdb7d3671890c70b44f167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFSyncInterruptEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setFSyncInterruptEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set FSYNC pin interrupt enabled setting. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New FSYNC pin interrupt enabled setting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a4c01f9ab83b64dbbc6b62e658c3d3d9b" kindref="member">getFSyncInterruptEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a39963ea6d8b9cbeebc4daf40f8872fed" kindref="member">MPU6050_INTCFG_FSYNC_INT_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="548" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1425" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aed33db318a770d0020eb8b84058650f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getI2CBypassEnabled</definition>
        <argsstring>()</argsstring>
        <name>getI2CBypassEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get I2C bypass enabled status. When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to 0, the host application processor will be able to directly access the auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host application processor will not be able to directly access the auxiliary I2C bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106 bit[5]). <simplesect kind="return"><para>Current I2C bypass enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ab3dd639412ccf5b69cfb66346d0b6b99" kindref="member">MPU6050_INTCFG_I2C_BYPASS_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="549" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1439" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aa828160756a50f414aa3f5f5f0353c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setI2CBypassEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setI2CBypassEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set I2C bypass enabled status. When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to 0, the host application processor will be able to directly access the auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host application processor will not be able to directly access the auxiliary I2C bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106 bit[5]). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New I2C bypass enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ab3dd639412ccf5b69cfb66346d0b6b99" kindref="member">MPU6050_INTCFG_I2C_BYPASS_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="550" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1454" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ada96c33957bf20c04ca598a3537358ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getClockOutputEnabled</definition>
        <argsstring>()</argsstring>
        <name>getClockOutputEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get reference clock output enabled status. When this bit is equal to 1, a reference clock output is provided at the CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For further information regarding CLKOUT, please refer to the MPU-60X0 Product Specification document. <simplesect kind="return"><para>Current reference clock output enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af6f983ee1d32777d725f259c7806f15a" kindref="member">MPU6050_INTCFG_CLKOUT_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="551" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1466" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a71ec4642b6f6c937bbf6a24fea4179e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setClockOutputEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setClockOutputEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set reference clock output enabled status. When this bit is equal to 1, a reference clock output is provided at the CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For further information regarding CLKOUT, please refer to the MPU-60X0 Product Specification document. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New reference clock output enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a82344e1daef2bac2e0d938319528be6c" kindref="member">MPU6050_RA_INT_PIN_CFG</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af6f983ee1d32777d725f259c7806f15a" kindref="member">MPU6050_INTCFG_CLKOUT_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="552" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1479" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a295c9600579557df065aff88bc7a1d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getIntEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get full interrupt enabled status. Full register byte for all interrupts, for quick reading. Each bit will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95b5ee3f5f796515c31f0b59f9ce0019" kindref="member">MPU6050_INTERRUPT_FF_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="555" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1492" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac7bcf24249dd5000320a8ec0ffe488c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntEnabled</definition>
        <argsstring>(uint8_t enabled)</argsstring>
        <name>setIntEnabled</name>
        <param>
          <type>uint8_t</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set full interrupt enabled status. Full register byte for all interrupts, for quick reading. Each bit should be set 0 for disabled, 1 for enabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a500bb2df2e46eaecd3fb2ba7304a5ed3" kindref="member">getIntFreefallEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95b5ee3f5f796515c31f0b59f9ce0019" kindref="member">MPU6050_INTERRUPT_FF_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="556" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1504" bodyend="1506"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a500bb2df2e46eaecd3fb2ba7304a5ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntFreefallEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntFreefallEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Free Fall interrupt enabled status. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95b5ee3f5f796515c31f0b59f9ce0019" kindref="member">MPU6050_INTERRUPT_FF_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="557" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1513" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a01a24a05f06463d5277e1670d6260e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntFreefallEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntFreefallEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Free Fall interrupt enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a500bb2df2e46eaecd3fb2ba7304a5ed3" kindref="member">getIntFreefallEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95b5ee3f5f796515c31f0b59f9ce0019" kindref="member">MPU6050_INTERRUPT_FF_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="558" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1523" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7de31a8e9f22765329d9f9e02db2f1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntMotionEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntMotionEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Motion Detection interrupt enabled status. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a510f9a47269818529f7dc7f7d5e662ae" kindref="member">MPU6050_INTERRUPT_MOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="559" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1532" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2d2d1d3b03198a09c83a48ec3bc20bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntMotionEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntMotionEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Motion Detection interrupt enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a7de31a8e9f22765329d9f9e02db2f1f0" kindref="member">getIntMotionEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a510f9a47269818529f7dc7f7d5e662ae" kindref="member">MPU6050_INTERRUPT_MOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="560" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1542" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ab3cc9bcaca6cec61e7f3f0c6c8a37db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntZeroMotionEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntZeroMotionEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Zero Motion Detection interrupt enabled status. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa4a24f325b4449adf83ce8458bb31a08" kindref="member">MPU6050_INTERRUPT_ZMOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="561" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1551" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a5e36e3acace6e545718d7997169cff9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntZeroMotionEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntZeroMotionEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Zero Motion Detection interrupt enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ab3cc9bcaca6cec61e7f3f0c6c8a37db5" kindref="member">getIntZeroMotionEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa4a24f325b4449adf83ce8458bb31a08" kindref="member">MPU6050_INTERRUPT_ZMOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="562" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1561" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a55f99c88cc84901f245924ed5e3fe47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntFIFOBufferOverflowEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntFIFOBufferOverflowEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get FIFO Buffer Overflow interrupt enabled status. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9d13e0ea2a96e5d234b7efa3de74d6bf" kindref="member">MPU6050_INTERRUPT_FIFO_OFLOW_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="563" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1570" bodyend="1573"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a83710a6b1e07f3b385239cc06f275cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntFIFOBufferOverflowEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntFIFOBufferOverflowEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set FIFO Buffer Overflow interrupt enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a55f99c88cc84901f245924ed5e3fe47e" kindref="member">getIntFIFOBufferOverflowEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9d13e0ea2a96e5d234b7efa3de74d6bf" kindref="member">MPU6050_INTERRUPT_FIFO_OFLOW_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="564" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1580" bodyend="1582"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a282ae29e029d88604a59c92bdf9ce252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntI2CMasterEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntI2CMasterEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get I2C Master interrupt enabled status. This enables any of the I2C Master interrupt sources to generate an interrupt. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1afb0bff7cde199d7806469f93b6e59b02" kindref="member">MPU6050_INTERRUPT_I2C_MST_INT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="565" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1590" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af238656844a3727fa96a8d434b55473e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntI2CMasterEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntI2CMasterEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set I2C Master interrupt enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a282ae29e029d88604a59c92bdf9ce252" kindref="member">getIntI2CMasterEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1afb0bff7cde199d7806469f93b6e59b02" kindref="member">MPU6050_INTERRUPT_I2C_MST_INT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="566" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1600" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae15f6043a74c9c9bf9754824802ce8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntDataReadyEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntDataReadyEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Data Ready interrupt enabled setting. This event occurs each time a write operation to all of the sensor registers has been completed. Will be set 0 for disabled, 1 for enabled. <simplesect kind="return"><para>Current interrupt enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1de9d9557aa7420c746721999df4a377" kindref="member">MPU6050_RA_INT_ENABLE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af58fafd4db7755e66e0beab54e88c41d" kindref="member">MPU6050_INTERRUPT_DATA_RDY_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="567" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1610" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a67a11be7fc7ab6b1186469b94ea33dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntDataReadyEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntDataReadyEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Data Ready interrupt enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New interrupt enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ae15f6043a74c9c9bf9754824802ce8d3" kindref="member">getIntDataReadyEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para>MPU6050_RA_INT_CFG </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af58fafd4db7755e66e0beab54e88c41d" kindref="member">MPU6050_INTERRUPT_DATA_RDY_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="568" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1620" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a550a735623cb1de950c72cd6931ee804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getIntStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get full set of interrupt status bits. These bits clear to 0 after the register has been read. Very useful for getting multiple INT statuses, since each single bit read clears all of them because it has to read the whole byte. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="571" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1633" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a06bbc2116235b7cc5e28c877e0576749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntFreefallStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntFreefallStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Free Fall interrupt status. This bit automatically sets to 1 when a Free Fall interrupt has been generated. The bit clears to 0 after the register has been read. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95b5ee3f5f796515c31f0b59f9ce0019" kindref="member">MPU6050_INTERRUPT_FF_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="572" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1644" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac0c0836aa0d237cac92d11591efd0d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntMotionStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntMotionStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Motion Detection interrupt status. This bit automatically sets to 1 when a Motion Detection interrupt has been generated. The bit clears to 0 after the register has been read. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a510f9a47269818529f7dc7f7d5e662ae" kindref="member">MPU6050_INTERRUPT_MOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="573" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1655" bodyend="1658"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1afa73a5ffdc423736ae88702a469ba3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntZeroMotionStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntZeroMotionStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Zero Motion Detection interrupt status. This bit automatically sets to 1 when a Zero Motion Detection interrupt has been generated. The bit clears to 0 after the register has been read. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa4a24f325b4449adf83ce8458bb31a08" kindref="member">MPU6050_INTERRUPT_ZMOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="574" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1666" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aa31427588f059c69d93ddb00ba257b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntFIFOBufferOverflowStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntFIFOBufferOverflowStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get FIFO Buffer Overflow interrupt status. This bit automatically sets to 1 when a Free Fall interrupt has been generated. The bit clears to 0 after the register has been read. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9d13e0ea2a96e5d234b7efa3de74d6bf" kindref="member">MPU6050_INTERRUPT_FIFO_OFLOW_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="575" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1677" bodyend="1680"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a31d6c2b03fc2d6ce82d67d142f316851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntI2CMasterStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntI2CMasterStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get I2C Master interrupt status. This bit automatically sets to 1 when an I2C Master interrupt has been generated. For a list of I2C Master interrupts, please refer to Register 54. The bit clears to 0 after the register has been read. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1afb0bff7cde199d7806469f93b6e59b02" kindref="member">MPU6050_INTERRUPT_I2C_MST_INT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="576" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1689" bodyend="1692"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae4f434eb51a15b536e2e8f89a776872b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntDataReadyStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntDataReadyStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Data Ready interrupt status. This bit automatically sets to 1 when a Data Ready interrupt has been generated. The bit clears to 0 after the register has been read. <simplesect kind="return"><para>Current interrupt status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a8337320c5ccc92def830e968d2e19d75" kindref="member">MPU6050_RA_INT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af58fafd4db7755e66e0beab54e88c41d" kindref="member">MPU6050_INTERRUPT_DATA_RDY_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="577" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1700" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aabfd2920e748016383e8124a4b32ad31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::getMotion9</definition>
        <argsstring>(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz, int16_t *mx, int16_t *my, int16_t *mz)</argsstring>
        <name>getMotion9</name>
        <param>
          <type>int16_t *</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>az</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>gy</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>gz</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>mx</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>my</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>mz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get raw 9-axis motion sensor readings (accel/gyro/compass). FUNCTION NOT FULLY IMPLEMENTED YET. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for accelerometer X-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for accelerometer Y-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for accelerometer Z-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for gyroscope X-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for gyroscope Y-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gz</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for gyroscope Z-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mx</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for magnetometer X-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>my</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for magnetometer Y-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mz</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for magnetometer Z-axis value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a658dfc7e35b7fdba360a75f137bde33a" kindref="member">getAcceleration()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a8ca85b87e7e0230921062fce7889b0d1" kindref="member">getRotation()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9f08bfd13152053c226e5efb57e1c209" kindref="member">MPU6050_RA_ACCEL_XOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="580" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1723" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::getMotion6</definition>
        <argsstring>(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz)</argsstring>
        <name>getMotion6</name>
        <param>
          <type>int16_t *</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>az</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>gy</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>gz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get raw 6-axis motion sensor readings (accel/gyro). Retrieves all currently available motion sensor values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ax</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for accelerometer X-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ay</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for accelerometer Y-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>az</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for accelerometer Z-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for gyroscope X-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for gyroscope Y-axis value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gz</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for gyroscope Z-axis value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a658dfc7e35b7fdba360a75f137bde33a" kindref="member">getAcceleration()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a8ca85b87e7e0230921062fce7889b0d1" kindref="member">getRotation()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9f08bfd13152053c226e5efb57e1c209" kindref="member">MPU6050_RA_ACCEL_XOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="581" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1739" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a658dfc7e35b7fdba360a75f137bde33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::getAcceleration</definition>
        <argsstring>(int16_t *x, int16_t *y, int16_t *z)</argsstring>
        <name>getAcceleration</name>
        <param>
          <type>int16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get 3-axis accelerometer readings. These registers store the most recent accelerometer measurements. Accelerometer measurements are written to these registers at the Sample Rate as defined in Register 25.</para>
<para>The accelerometer measurement registers, along with the temperature measurement registers, gyroscope measurement registers, and external sensor data registers, are composed of two sets of registers: an internal register set and a user-facing read register set.</para>
<para>The data within the accelerometer sensors&apos; internal register set is always updated at the Sample Rate. Meanwhile, the user-facing read register set duplicates the internal register set&apos;s data values whenever the serial interface is idle. This guarantees that a burst read of sensor registers will read measurements from the same sampling instant. Note that if burst reads are not used, the user is responsible for ensuring a set of single byte reads correspond to a single sampling instant by checking the Data Ready interrupt.</para>
<para>Each 16-bit accelerometer measurement has a full scale defined in ACCEL_FS (Register 28). For each full scale setting, the accelerometers&apos; sensitivity per LSB in ACCEL_xOUT is shown in the table below:</para>
<para><preformatted>
AFS_SEL | Full Scale Range | LSB Sensitivity
--------+------------------+----------------
0       | +/- 2g           | 8192 LSB/mg
1       | +/- 4g           | 4096 LSB/mg
2       | +/- 8g           | 2048 LSB/mg
3       | +/- 16g          | 1024 LSB/mg
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for X-axis acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for Y-axis acceleration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for Z-axis acceleration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1abf19d88e8e460df1c49750393ee4b72c" kindref="member">MPU6050_RA_GYRO_XOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="582" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1784" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aa68475158c22128e5459c4c5e19439dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getAccelerationX</definition>
        <argsstring>()</argsstring>
        <name>getAccelerationX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get X-axis accelerometer reading. <simplesect kind="return"><para>X-axis acceleration measurement in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a9f08bfd13152053c226e5efb57e1c209" kindref="member">MPU6050_RA_ACCEL_XOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="583" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1795" bodyend="1798"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a27240b90d3e03c85b7a619b794bb1756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getAccelerationY</definition>
        <argsstring>()</argsstring>
        <name>getAccelerationY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Y-axis accelerometer reading. <simplesect kind="return"><para>Y-axis acceleration measurement in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1accc9b8669e7b799c8630e8a84cd24692" kindref="member">MPU6050_RA_ACCEL_YOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="584" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1804" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1acf5f5a20c10d99a1bdedf139f897bfdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getAccelerationZ</definition>
        <argsstring>()</argsstring>
        <name>getAccelerationZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Z-axis accelerometer reading. <simplesect kind="return"><para>Z-axis acceleration measurement in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a2244ed0bf9c94ab5cde2bba541bfa22f" kindref="member">MPU6050_RA_ACCEL_ZOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="585" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1813" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aedfa4f1e6507f48c0a09545345a87875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getTemperature</definition>
        <argsstring>()</argsstring>
        <name>getTemperature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current internal temperature. <simplesect kind="return"><para>Temperature reading in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa4318f7e67df92b06d81356b38048a6d" kindref="member">MPU6050_RA_TEMP_OUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="588" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1824" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8ca85b87e7e0230921062fce7889b0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::getRotation</definition>
        <argsstring>(int16_t *x, int16_t *y, int16_t *z)</argsstring>
        <name>getRotation</name>
        <param>
          <type>int16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get 3-axis gyroscope readings. These gyroscope measurement registers, along with the accelerometer measurement registers, temperature measurement registers, and external sensor data registers, are composed of two sets of registers: an internal register set and a user-facing read register set. The data within the gyroscope sensors&apos; internal register set is always updated at the Sample Rate. Meanwhile, the user-facing read register set duplicates the internal register set&apos;s data values whenever the serial interface is idle. This guarantees that a burst read of sensor registers will read measurements from the same sampling instant. Note that if burst reads are not used, the user is responsible for ensuring a set of single byte reads correspond to a single sampling instant by checking the Data Ready interrupt.</para>
<para>Each 16-bit gyroscope measurement has a full scale defined in FS_SEL (Register 27). For each full scale setting, the gyroscopes&apos; sensitivity per LSB in GYRO_xOUT is shown in the table below:</para>
<para><preformatted>
FS_SEL | Full Scale Range   | LSB Sensitivity
-------+--------------------+----------------
0      | +/- 250 degrees/s  | 131 LSB/deg/s
1      | +/- 500 degrees/s  | 65.5 LSB/deg/s
2      | +/- 1000 degrees/s | 32.8 LSB/deg/s
3      | +/- 2000 degrees/s | 16.4 LSB/deg/s
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for X-axis rotation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for Y-axis rotation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit signed integer container for Z-axis rotation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1abf19d88e8e460df1c49750393ee4b72c" kindref="member">MPU6050_RA_GYRO_XOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="591" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1863" bodyend="1868"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a268f52843a24992ff06a3f12392de584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getRotationX</definition>
        <argsstring>()</argsstring>
        <name>getRotationX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get X-axis gyroscope reading. <simplesect kind="return"><para>X-axis rotation measurement in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1abf19d88e8e460df1c49750393ee4b72c" kindref="member">MPU6050_RA_GYRO_XOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="592" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1874" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a97cbe7f10dd27e07bd78d1c25e4286b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getRotationY</definition>
        <argsstring>()</argsstring>
        <name>getRotationY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Y-axis gyroscope reading. <simplesect kind="return"><para>Y-axis rotation measurement in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a97729ffd27bd81b9af5b42a598f91736" kindref="member">MPU6050_RA_GYRO_YOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="593" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1883" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae0fee1ba996a2b6f914df6fc34e7da48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getRotationZ</definition>
        <argsstring>()</argsstring>
        <name>getRotationZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Z-axis gyroscope reading. <simplesect kind="return"><para>Z-axis rotation measurement in 16-bit 2&apos;s complement format </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" kindref="member">getMotion6()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac134c8894ef3aa4715e796f7a3a56383" kindref="member">MPU6050_RA_GYRO_ZOUT_H</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="594" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1892" bodyend="1895"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7f786ab4264f40e5a95e8937ec9adcc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getExternalSensorByte</definition>
        <argsstring>(int position)</argsstring>
        <name>getExternalSensorByte</name>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read single byte from external sensor data register. These registers store data read from external sensors by the Slave 0, 1, 2, and 3 on the auxiliary I2C interface. Data read by Slave 4 is stored in I2C_SLV4_DI (Register 53).</para>
<para>External sensor data is written to these registers at the Sample Rate as defined in Register 25. This access rate can be reduced by using the Slave Delay Enable registers (Register 103).</para>
<para>External sensor data registers, along with the gyroscope measurement registers, accelerometer measurement registers, and temperature measurement registers, are composed of two sets of registers: an internal register set and a user-facing read register set.</para>
<para>The data within the external sensors&apos; internal register set is always updated at the Sample Rate (or the reduced access rate) whenever the serial interface is idle. This guarantees that a burst read of sensor registers will read measurements from the same sampling instant. Note that if burst reads are not used, the user is responsible for ensuring a set of single byte reads correspond to a single sampling instant by checking the Data Ready interrupt.</para>
<para>Data is placed in these external sensor data registers according to I2C_SLV0_CTRL, I2C_SLV1_CTRL, I2C_SLV2_CTRL, and I2C_SLV3_CTRL (Registers 39, 42, 45, and 48). When more than zero bytes are read (I2C_SLVx_LEN &gt; 0) from an enabled slave (I2C_SLVx_EN = 1), the slave is read at the Sample Rate (as defined in Register 25) or delayed rate (if specified in Register 52 and 103). During each Sample cycle, slave reads are performed in order of Slave number. If all slaves are enabled with more than zero bytes to be read, the order will be Slave 0, followed by Slave 1, Slave 2, and Slave 3.</para>
<para>Each enabled slave will have EXT_SENS_DATA registers associated with it by number of bytes read (I2C_SLVx_LEN) in order of slave number, starting from EXT_SENS_DATA_00. Note that this means enabling or disabling a slave may change the higher numbered slaves&apos; associated registers. Furthermore, if fewer total bytes are being read from the external sensors as a result of such a change, then the data remaining in the registers which no longer have an associated slave device (i.e. high numbered registers) will remain in these previously allocated registers unless reset.</para>
<para>If the sum of the read lengths of all SLVx transactions exceed the number of available EXT_SENS_DATA registers, the excess bytes will be dropped. There are 24 EXT_SENS_DATA registers and hence the total read lengths between all the slaves cannot be greater than 24 or some bytes will be lost.</para>
<para>Note: Slave 4&apos;s behavior is distinct from that of Slaves 0-3. For further information regarding the characteristics of Slave 4, please refer to Registers 49 to 53.</para>
<para>EXAMPLE: Suppose that Slave 0 is enabled with 4 bytes to be read (I2C_SLV0_EN = 1 and I2C_SLV0_LEN = 4) while Slave 1 is enabled with 2 bytes to be read so that I2C_SLV1_EN = 1 and I2C_SLV1_LEN = 2. In such a situation, EXT_SENS_DATA _00 through _03 will be associated with Slave 0, while EXT_SENS_DATA _04 and 05 will be associated with Slave 1. If Slave 2 is enabled as well, registers starting from EXT_SENS_DATA_06 will be allocated to Slave 2.</para>
<para>If Slave 2 is disabled while Slave 3 is enabled in this same situation, then registers starting from EXT_SENS_DATA_06 will be allocated to Slave 3 instead.</para>
<para>REGISTER ALLOCATION FOR DYNAMIC DISABLE VS. NORMAL DISABLE: If a slave is disabled at any time, the space initially allocated to the slave in the EXT_SENS_DATA register, will remain associated with that slave. This is to avoid dynamic adjustment of the register allocation.</para>
<para>The allocation of the EXT_SENS_DATA registers is recomputed only when (1) all slaves are disabled, or (2) the I2C_MST_RST bit is set (Register 106).</para>
<para>This above is also true if one of the slaves gets NACKed and stops functioning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position (0-23) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Byte read from register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="597" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1973" bodyend="1976"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aaee15e48af7ba78660b5754f3bb5f37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t MPU6050::getExternalSensorWord</definition>
        <argsstring>(int position)</argsstring>
        <name>getExternalSensorWord</name>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read word (2 bytes) from external sensor data registers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position (0-21) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Word read from register </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a7f786ab4264f40e5a95e8937ec9adcc2" kindref="member">getExternalSensorByte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="598" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1982" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1afd8983f0911e37015434bebc85185fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t MPU6050::getExternalSensorDWord</definition>
        <argsstring>(int position)</argsstring>
        <name>getExternalSensorDWord</name>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read double word (4 bytes) from external sensor data registers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position (0-20) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Double word read from registers </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a7f786ab4264f40e5a95e8937ec9adcc2" kindref="member">getExternalSensorByte()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="599" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="1991" bodyend="1994"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a446d235905783c5b90637a6b6792ac76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getXNegMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getXNegMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get X-axis negative motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a4aad48766db4bb295d0d1f4a7857b8c3" kindref="member">MPU6050_MOTION_MOT_XNEG_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="602" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2003" bodyend="2006"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a410af58f5ff5f74e4ef8d61495908226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getXPosMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getXPosMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get X-axis positive motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aa8e676899573e11b356291e335cbe340" kindref="member">MPU6050_MOTION_MOT_XPOS_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="603" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2012" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6c45be7b4aa9081c83ee0f4081bf0827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getYNegMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getYNegMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Y-axis negative motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5273d39ef8f5d87e931609fee90d4120" kindref="member">MPU6050_MOTION_MOT_YNEG_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="604" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2021" bodyend="2024"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad959ec84b9fe9f7e416b7af252f37abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getYPosMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getYPosMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Y-axis positive motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae1473d5aa4b8f0dbda1e15b205c23bcf" kindref="member">MPU6050_MOTION_MOT_YPOS_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="605" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2030" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3601b732eb15644212b8f29cf396e142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getZNegMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getZNegMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Z-axis negative motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acdf23f184c06ec12587582b4a0ad60a8" kindref="member">MPU6050_MOTION_MOT_ZNEG_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="606" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2039" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a33c766cd415fc5780417b1ed76717875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getZPosMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getZPosMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Z-axis positive motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a21646cdd13cd4d72bc18ec615774e9c5" kindref="member">MPU6050_MOTION_MOT_ZPOS_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="607" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2048" bodyend="2051"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a384765351b5c4bd2b6efec9ed71ad1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getZeroMotionDetected</definition>
        <argsstring>()</argsstring>
        <name>getZeroMotionDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get zero motion detection interrupt status. <simplesect kind="return"><para>Motion detection status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a5b725ca4941b1a73f8e4df3d7164d514" kindref="member">MPU6050_RA_MOT_DETECT_STATUS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a851e3f5ae43d03ef3d59916a731a8c6a" kindref="member">MPU6050_MOTION_MOT_ZRMOT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="608" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2057" bodyend="2060"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a34a1def575f6abcd464afe954de8a461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveOutputByte</definition>
        <argsstring>(uint8_t num, uint8_t data)</argsstring>
        <name>setSlaveOutputByte</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write byte to Data Output container for specified slave. This register holds the output data written into Slave when Slave is set to write mode. For further information regarding Slave control, please refer to Registers 37 to 39 and immediately following. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a53ca9562881303b665299907726fb753" kindref="member">MPU6050_RA_I2C_SLV0_DO</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="611" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2072" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a0e5cb13838298609b5260fd1558f8c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getExternalShadowDelayEnabled</definition>
        <argsstring>()</argsstring>
        <name>getExternalShadowDelayEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get external data shadow delay enabled status. This register is used to specify the timing of external sensor data shadowing. When DELAY_ES_SHADOW is set to 1, shadowing of external sensor data is delayed until all data has been received. <simplesect kind="return"><para>Current external data shadow delay enabled status. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95960b2c82d00341b6174272e2fb3e07" kindref="member">MPU6050_RA_I2C_MST_DELAY_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a77b25de3f3dbdb1aec3201cab7d88980" kindref="member">MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="614" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2087" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9160193d883871037c6535a9d3e02ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setExternalShadowDelayEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setExternalShadowDelayEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set external data shadow delay enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New external data shadow delay enabled status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a0e5cb13838298609b5260fd1558f8c92" kindref="member">getExternalShadowDelayEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95960b2c82d00341b6174272e2fb3e07" kindref="member">MPU6050_RA_I2C_MST_DELAY_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a77b25de3f3dbdb1aec3201cab7d88980" kindref="member">MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="615" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2097" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae84fd795630f9ab5e8d6b19a616a11ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSlaveDelayEnabled</definition>
        <argsstring>(uint8_t num)</argsstring>
        <name>getSlaveDelayEnabled</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get slave delay enabled status. When a particular slave delay is enabled, the rate of access for the that slave device is reduced. When a slave&apos;s access rate is decreased relative to the Sample Rate, the slave is accessed every: <verbatim>1 / (1 + I2C_MST_DLY) Samples
</verbatim></para>
<para>This base Sample Rate in turn is determined by SMPLRT_DIV (register * 25) and DLPF_CFG (register 26).</para>
<para>For further information regarding I2C_MST_DLY, please refer to register 52. For further information regarding the Sample Rate, please refer to register 25.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-4) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current slave delay enabled status. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95960b2c82d00341b6174272e2fb3e07" kindref="member">MPU6050_RA_I2C_MST_DELAY_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae79610c4ceb7d51823836a1242e81f28" kindref="member">MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="616" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2118" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a471929d7cf9049357c345633d22412a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSlaveDelayEnabled</definition>
        <argsstring>(uint8_t num, bool enabled)</argsstring>
        <name>setSlaveDelayEnabled</name>
        <param>
          <type>uint8_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set slave delay enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number (0-4) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New slave delay enabled status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a95960b2c82d00341b6174272e2fb3e07" kindref="member">MPU6050_RA_I2C_MST_DELAY_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae79610c4ceb7d51823836a1242e81f28" kindref="member">MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="617" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2130" bodyend="2132"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af1599c0d70f07fd3e28683d571842c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetGyroscopePath</definition>
        <argsstring>()</argsstring>
        <name>resetGyroscopePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset gyroscope signal path. The reset will revert the signal path analog to digital converters and filters to their power up configurations. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1accbe0fc25de063494eac9fda35ed1ca5" kindref="member">MPU6050_RA_SIGNAL_PATH_RESET</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac83827506ea3a6c8ed40a0c6e97e2417" kindref="member">MPU6050_PATHRESET_GYRO_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="620" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2142" bodyend="2144"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a99ee74708c12f32e48ef5ec69ac9f4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetAccelerometerPath</definition>
        <argsstring>()</argsstring>
        <name>resetAccelerometerPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset accelerometer signal path. The reset will revert the signal path analog to digital converters and filters to their power up configurations. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1accbe0fc25de063494eac9fda35ed1ca5" kindref="member">MPU6050_RA_SIGNAL_PATH_RESET</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1aac6a4cb8f1df1d5e7981c276dddf17ab" kindref="member">MPU6050_PATHRESET_ACCEL_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="621" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2151" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a559c2d091d36a4e0489bc639916ddbb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetTemperaturePath</definition>
        <argsstring>()</argsstring>
        <name>resetTemperaturePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset temperature sensor signal path. The reset will revert the signal path analog to digital converters and filters to their power up configurations. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1accbe0fc25de063494eac9fda35ed1ca5" kindref="member">MPU6050_RA_SIGNAL_PATH_RESET</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a4ef510137ee58f16813c0326b196e5a6" kindref="member">MPU6050_PATHRESET_TEMP_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="622" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2160" bodyend="2162"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aae903df2accc687423f9cd0a78f9cd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getAccelerometerPowerOnDelay</definition>
        <argsstring>()</argsstring>
        <name>getAccelerometerPowerOnDelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get accelerometer power-on delay. The accelerometer data path provides samples to the sensor registers, Motion detection, Zero Motion detection, and Free Fall detection modules. The signal path contains filters which must be flushed on wake-up with new samples before the detection modules begin operations. The default wake-up delay, of 4ms can be lengthened by up to 3ms. This additional delay is specified in ACCEL_ON_DELAY in units of 1 LSB = 1 ms. The user may select any value above zero unless instructed otherwise by InvenSense. Please refer to Section 8 of the MPU-6000/MPU-6050 Product Specification document for further information regarding the detection modules. <simplesect kind="return"><para>Current accelerometer power-on delay </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae83e3eb48f0803227db54291fdf0ea80" kindref="member">MPU6050_RA_MOT_DETECT_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a31babac49d185160595482b1a41a9db3" kindref="member">MPU6050_DETECT_ACCEL_ON_DELAY_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="625" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2180" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2bbde7653d2d2d37e16e515599f3b08b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setAccelerometerPowerOnDelay</definition>
        <argsstring>(uint8_t delay)</argsstring>
        <name>setAccelerometerPowerOnDelay</name>
        <param>
          <type>uint8_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set accelerometer power-on delay. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>New accelerometer power-on delay (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1aae903df2accc687423f9cd0a78f9cd32" kindref="member">getAccelerometerPowerOnDelay()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae83e3eb48f0803227db54291fdf0ea80" kindref="member">MPU6050_RA_MOT_DETECT_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a31babac49d185160595482b1a41a9db3" kindref="member">MPU6050_DETECT_ACCEL_ON_DELAY_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="626" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2190" bodyend="2192"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af6d6fa9869636989a8b29c4827ad7de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getFreefallDetectionCounterDecrement</definition>
        <argsstring>()</argsstring>
        <name>getFreefallDetectionCounterDecrement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Free Fall detection counter decrement configuration. Detection is registered by the Free Fall detection module after accelerometer measurements meet their respective threshold conditions over a specified number of samples. When the threshold conditions are met, the corresponding detection counter increments by 1. The user may control the rate at which the detection counter decrements when the threshold condition is not met by configuring FF_COUNT. The decrement rate can be set according to the following table:</para>
<para><preformatted>
FF_COUNT | Counter Decrement
---------+------------------
0        | Reset
1        | 1
2        | 2
3        | 4
</preformatted></para>
<para>When FF_COUNT is configured to 0 (reset), any non-qualifying sample will reset the counter to 0. For further information on Free Fall detection, please refer to Registers 29 to 32.</para>
<para><simplesect kind="return"><para>Current decrement configuration </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae83e3eb48f0803227db54291fdf0ea80" kindref="member">MPU6050_RA_MOT_DETECT_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a77e346aef05647d9d492077e0297d67b" kindref="member">MPU6050_DETECT_FF_COUNT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="627" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2219" bodyend="2222"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a18dd79b7c53600e9ce97eed4bfe6cf15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFreefallDetectionCounterDecrement</definition>
        <argsstring>(uint8_t decrement)</argsstring>
        <name>setFreefallDetectionCounterDecrement</name>
        <param>
          <type>uint8_t</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Free Fall detection counter decrement configuration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decrement</parametername>
</parameternamelist>
<parameterdescription>
<para>New decrement configuration value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1af6d6fa9869636989a8b29c4827ad7de8" kindref="member">getFreefallDetectionCounterDecrement()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae83e3eb48f0803227db54291fdf0ea80" kindref="member">MPU6050_RA_MOT_DETECT_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a77e346aef05647d9d492077e0297d67b" kindref="member">MPU6050_DETECT_FF_COUNT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="628" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2229" bodyend="2231"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a0ed8de8eb440dbfdec829297527b0da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getMotionDetectionCounterDecrement</definition>
        <argsstring>()</argsstring>
        <name>getMotionDetectionCounterDecrement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Motion detection counter decrement configuration. Detection is registered by the Motion detection module after accelerometer measurements meet their respective threshold conditions over a specified number of samples. When the threshold conditions are met, the corresponding detection counter increments by 1. The user may control the rate at which the detection counter decrements when the threshold condition is not met by configuring MOT_COUNT. The decrement rate can be set according to the following table:</para>
<para><preformatted>
MOT_COUNT | Counter Decrement
----------+------------------
0         | Reset
1         | 1
2         | 2
3         | 4
</preformatted></para>
<para>When MOT_COUNT is configured to 0 (reset), any non-qualifying sample will reset the counter to 0. For further information on Motion detection, please refer to Registers 29 to 32. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="629" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2255" bodyend="2258"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a74cc3ea727afa5d4406175085e60d08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMotionDetectionCounterDecrement</definition>
        <argsstring>(uint8_t decrement)</argsstring>
        <name>setMotionDetectionCounterDecrement</name>
        <param>
          <type>uint8_t</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Motion detection counter decrement configuration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decrement</parametername>
</parameternamelist>
<parameterdescription>
<para>New decrement configuration value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a0ed8de8eb440dbfdec829297527b0da6" kindref="member">getMotionDetectionCounterDecrement()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ae83e3eb48f0803227db54291fdf0ea80" kindref="member">MPU6050_RA_MOT_DETECT_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a43d8fcac0f570c3333ef3236764c8315" kindref="member">MPU6050_DETECT_MOT_COUNT_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="630" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2265" bodyend="2267"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ae2687a09ebe0d7fbbf74f560e0dd9a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getFIFOEnabled</definition>
        <argsstring>()</argsstring>
        <name>getFIFOEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get FIFO enabled status. When this bit is set to 0, the FIFO buffer is disabled. The FIFO buffer cannot be written to or read from while disabled. The FIFO buffer&apos;s state does not change unless the MPU-60X0 is power cycled. <simplesect kind="return"><para>Current FIFO enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a4d287b028bfb7d4f40a8da106ed74d66" kindref="member">MPU6050_USERCTRL_FIFO_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="633" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2279" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a78e58ab27986db6999af775ed4d43091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFIFOEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setFIFOEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set FIFO enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New FIFO enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1ae2687a09ebe0d7fbbf74f560e0dd9a44" kindref="member">getFIFOEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a4d287b028bfb7d4f40a8da106ed74d66" kindref="member">MPU6050_USERCTRL_FIFO_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="634" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2289" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6b45e538f2082eb1b1975ed56e3e21bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getI2CMasterModeEnabled</definition>
        <argsstring>()</argsstring>
        <name>getI2CMasterModeEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get I2C Master Mode enabled status. When this mode is enabled, the MPU-60X0 acts as the I2C Master to the external sensor slave devices on the auxiliary I2C bus. When this bit is cleared to 0, the auxiliary I2C bus lines (AUX_DA and AUX_CL) are logically driven by the primary I2C bus (SDA and SCL). This is a precondition to enabling Bypass Mode. For further information regarding Bypass Mode, please refer to Register 55. <simplesect kind="return"><para>Current I2C Master Mode enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1974fd2b8e743e0c5517ff903da5f99a" kindref="member">MPU6050_USERCTRL_I2C_MST_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="635" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2303" bodyend="2306"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6503f0fdfefa0fd287a75032667b7b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setI2CMasterModeEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setI2CMasterModeEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set I2C Master Mode enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New I2C Master Mode enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a6b45e538f2082eb1b1975ed56e3e21bc" kindref="member">getI2CMasterModeEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a1974fd2b8e743e0c5517ff903da5f99a" kindref="member">MPU6050_USERCTRL_I2C_MST_EN_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="636" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2313" bodyend="2315"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a269710b7bca814bbf67e7bb38c381650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::switchSPIEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>switchSPIEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Switch from I2C to SPI mode (MPU-6000 only) If this is set, the primary SPI interface will be enabled in place of the disabled primary I2C interface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="637" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2320" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aafa0dc38b7ea2acd1aecd5d9df8cbd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetFIFO</definition>
        <argsstring>()</argsstring>
        <name>resetFIFO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the FIFO. This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This bit automatically clears to 0 after the reset has been triggered. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ad13b067b38b832477c0139266a863204" kindref="member">MPU6050_USERCTRL_FIFO_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="638" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2329" bodyend="2331"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a96332c394f1b7efd44c83a4ff690e732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetI2CMaster</definition>
        <argsstring>()</argsstring>
        <name>resetI2CMaster</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the I2C Master. This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0. This bit automatically clears to 0 after the reset has been triggered. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1abca1324e14bfff124823daecc1df2479" kindref="member">MPU6050_USERCTRL_I2C_MST_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="639" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2338" bodyend="2340"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9a271104d3302abc4af005c69a930094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetSensors</definition>
        <argsstring>()</argsstring>
        <name>resetSensors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset all sensor registers and signal paths. When set to 1, this bit resets the signal paths for all sensors (gyroscopes, accelerometers, and temperature sensor). This operation will also clear the sensor registers. This bit automatically clears to 0 after the reset has been triggered.</para>
<para>When resetting only the signal path (and not the sensor registers), please use Register 104, SIGNAL_PATH_RESET.</para>
<para><simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1acd4c638a6f677a42ecb9a3d7612d087a" kindref="member">MPU6050_RA_USER_CTRL</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a19d39a5b4f64b95d9003c087ccbc6a67" kindref="member">MPU6050_USERCTRL_SIG_COND_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="640" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2353" bodyend="2355"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7100b6d276c3c8664cf00d768b7b0dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger a full device reset. A small delay of ~50ms may be desirable after triggering a reset. <simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a7b0ecc568c76cb52b57dd31487c2379e" kindref="member">MPU6050_PWR1_DEVICE_RESET_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="643" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2364" bodyend="2366"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a196404ef04b959083d4bf5e6f1cd8b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getSleepEnabled</definition>
        <argsstring>()</argsstring>
        <name>getSleepEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get sleep mode status. Setting the SLEEP bit in the register puts the device into very low power sleep mode. In this mode, only the serial interface and internal registers remain active, allowing for a very low standby current. Clearing this bit puts the device back into normal mode. To save power, the individual standby selections for each of the gyros should be used if any gyro axis is not used by the application. <simplesect kind="return"><para>Current sleep mode enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a303276044c71a042bb43d24a888104d9" kindref="member">MPU6050_PWR1_SLEEP_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="644" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2378" bodyend="2381"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a15ec5f8e7daf235f507c1d8b96af051a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setSleepEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setSleepEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set sleep mode status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New sleep mode enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a196404ef04b959083d4bf5e6f1cd8b98" kindref="member">getSleepEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a303276044c71a042bb43d24a888104d9" kindref="member">MPU6050_PWR1_SLEEP_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="645" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2388" bodyend="2390"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a89afc5235b9088c696e2cc7841f5259a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getWakeCycleEnabled</definition>
        <argsstring>()</argsstring>
        <name>getWakeCycleEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get wake cycle enabled status. When this bit is set to 1 and SLEEP is disabled, the MPU-60X0 will cycle between sleep mode and waking up to take a single sample of data from active sensors at a rate determined by LP_WAKE_CTRL (register 108). <simplesect kind="return"><para>Current sleep mode enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a78ae6e61ebfd0704101e073b268151d4" kindref="member">MPU6050_PWR1_CYCLE_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="646" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2399" bodyend="2402"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a340eade71cf6286f6904c2021330944e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setWakeCycleEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setWakeCycleEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set wake cycle enabled status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New sleep mode enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a89afc5235b9088c696e2cc7841f5259a" kindref="member">getWakeCycleEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a78ae6e61ebfd0704101e073b268151d4" kindref="member">MPU6050_PWR1_CYCLE_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="647" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2409" bodyend="2411"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a31f588beab6760258212c65725eba336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getTempSensorEnabled</definition>
        <argsstring>()</argsstring>
        <name>getTempSensorEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get temperature sensor enabled status. Control the usage of the internal temperature sensor.</para>
<para>Note: this register stores the <emphasis>disabled</emphasis> value, but for consistency with the rest of the code, the function is named and used with standard true/false values to indicate whether the sensor is enabled or disabled, respectively.</para>
<para><simplesect kind="return"><para>Current temperature sensor enabled status </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af87944da0c9b3b0a14ed2f0049fe0ec2" kindref="member">MPU6050_PWR1_TEMP_DIS_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="648" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2423" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a0113871802e88c80fe69ce1f607987ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setTempSensorEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setTempSensorEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set temperature sensor enabled status. Note: this register stores the <emphasis>disabled</emphasis> value, but for consistency with the rest of the code, the function is named and used with standard true/false values to indicate whether the sensor is enabled or disabled, respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>New temperature sensor enabled status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a31f588beab6760258212c65725eba336" kindref="member">getTempSensorEnabled()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1af87944da0c9b3b0a14ed2f0049fe0ec2" kindref="member">MPU6050_PWR1_TEMP_DIS_BIT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="649" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2437" bodyend="2440"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8ed670258a805807b5102cdc5d0996a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getClockSource</definition>
        <argsstring>()</argsstring>
        <name>getClockSource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get clock source setting. <simplesect kind="return"><para>Current clock source setting </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a77a4abb41f9adaa799cccf6402443cb9" kindref="member">MPU6050_PWR1_CLKSEL_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a211c99bb94df09b85cf838b2a5eb7167" kindref="member">MPU6050_PWR1_CLKSEL_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="650" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2447" bodyend="2450"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4c1cd147d038e024bdeaa053c4d77734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setClockSource</definition>
        <argsstring>(uint8_t source)</argsstring>
        <name>setClockSource</name>
        <param>
          <type>uint8_t</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set clock source setting. An internal 8MHz oscillator, gyroscope based clock, or external sources can be selected as the MPU-60X0 clock source. When the internal 8 MHz oscillator or an external source is chosen as the clock source, the MPU-60X0 can operate in low power modes with the gyroscopes disabled.</para>
<para>Upon power up, the MPU-60X0 clock source defaults to the internal oscillator. However, it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source) as the clock reference for improved stability. The clock source can be selected according to the following table:</para>
<para><preformatted>
CLK_SEL | Clock Source
--------+--------------------------------------
0       | Internal oscillator
1       | PLL with X Gyro reference
2       | PLL with Y Gyro reference
3       | PLL with Z Gyro reference
4       | PLL with external 32.768kHz reference
5       | PLL with external 19.2MHz reference
6       | Reserved
7       | Stops the clock and keeps the timing generator in reset
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>New clock source setting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_m_p_u6050_1a8ed670258a805807b5102cdc5d0996a8" kindref="member">getClockSource()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1ac6c83146165a2307ac7155d4fa566df4" kindref="member">MPU6050_RA_PWR_MGMT_1</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a77a4abb41f9adaa799cccf6402443cb9" kindref="member">MPU6050_PWR1_CLKSEL_BIT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_m_p_u6050_8h_1a211c99bb94df09b85cf838b2a5eb7167" kindref="member">MPU6050_PWR1_CLKSEL_LENGTH</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="651" column="1" bodyfile="code/MPU6050/MPU6050.cpp" bodystart="2481" bodyend="2483"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a249a905ae4572a462414f2d94236258a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getWakeFrequency</definition>
        <argsstring>()</argsstring>
        <name>getWakeFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a62495e89f4787e6b18f0f795cef2b7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setWakeFrequency</definition>
        <argsstring>(uint8_t frequency)</argsstring>
        <name>setWakeFrequency</name>
        <param>
          <type>uint8_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a99261a04739fdb7a9a1c5b67ce3e710e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getStandbyXAccelEnabled</definition>
        <argsstring>()</argsstring>
        <name>getStandbyXAccelEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1af4df87fd2e87f41d06706cfd5bbc2a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setStandbyXAccelEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setStandbyXAccelEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a104f2ec438d745f8fdeec202bae09b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getStandbyYAccelEnabled</definition>
        <argsstring>()</argsstring>
        <name>getStandbyYAccelEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7ce7d3299479eb66518acf0697132835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setStandbyYAccelEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setStandbyYAccelEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1adae85612e047c4c7f0c3b7110fc92956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getStandbyZAccelEnabled</definition>
        <argsstring>()</argsstring>
        <name>getStandbyZAccelEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac5fd917549d2ed0f12b8a17167271199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setStandbyZAccelEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setStandbyZAccelEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1acb5fde4167aa54fbbe84706d577a48a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getStandbyXGyroEnabled</definition>
        <argsstring>()</argsstring>
        <name>getStandbyXGyroEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac1c6d8f623a9ca00a4ddc50f6615b977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setStandbyXGyroEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setStandbyXGyroEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aaad2985f8d22aec123f1e1dabcdd427a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getStandbyYGyroEnabled</definition>
        <argsstring>()</argsstring>
        <name>getStandbyYGyroEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ab0973d64b7132188539b07991f7ea1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setStandbyYGyroEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setStandbyYGyroEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a20f7804db1a980a3c425ae44c33d420b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getStandbyZGyroEnabled</definition>
        <argsstring>()</argsstring>
        <name>getStandbyZGyroEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ada7c8a873fe157703dcdc08e25b48e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setStandbyZGyroEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setStandbyZGyroEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad96c7a75a39327ebaae01386bcbc58dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t MPU6050::getFIFOCount</definition>
        <argsstring>()</argsstring>
        <name>getFIFOCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7733011d30d5b64564f6b5422d8639ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getFIFOByte</definition>
        <argsstring>()</argsstring>
        <name>getFIFOByte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a66da5bc38aa82404117d1ef5306c951a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setFIFOByte</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>setFIFOByte</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aba36dcb767b5cd8965053987aaa08a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::getFIFOBytes</definition>
        <argsstring>(uint8_t *data, uint8_t length)</argsstring>
        <name>getFIFOBytes</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a35ae3c8894b3258e642043886801e031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getDeviceID</definition>
        <argsstring>()</argsstring>
        <name>getDeviceID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6eb099e3dc96eb4d113cf81804256e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getOTPBankValid</definition>
        <argsstring>()</argsstring>
        <name>getOTPBankValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a074024a7818b2998b3f1c99064bea3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setOTPBankValid</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setOTPBankValid</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="684" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4d71a79f90f97f8ea0f88825502789b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t MPU6050::getXGyroOffset</definition>
        <argsstring>()</argsstring>
        <name>getXGyroOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad0c66eb7f77ab0ef19fca7124c63ba9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setXGyroOffset</definition>
        <argsstring>(int8_t offset)</argsstring>
        <name>setXGyroOffset</name>
        <param>
          <type>int8_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a829d38a14ad1096ea73ee628cdf03b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t MPU6050::getYGyroOffset</definition>
        <argsstring>()</argsstring>
        <name>getYGyroOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7f547a52a20bc1ebb23faa1e6668bff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setYGyroOffset</definition>
        <argsstring>(int8_t offset)</argsstring>
        <name>setYGyroOffset</name>
        <param>
          <type>int8_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a62b2adfa117b435ec24b574d9821d01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t MPU6050::getZGyroOffset</definition>
        <argsstring>()</argsstring>
        <name>getZGyroOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a20dbe1fac22c021fb3228522aea5c96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZGyroOffset</definition>
        <argsstring>(int8_t offset)</argsstring>
        <name>setZGyroOffset</name>
        <param>
          <type>int8_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9c9332a5050be54fa47f321be01d524b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t MPU6050::getXFineGain</definition>
        <argsstring>()</argsstring>
        <name>getXFineGain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a73d4473d134cf5f7c516ff38faa2b4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setXFineGain</definition>
        <argsstring>(int8_t gain)</argsstring>
        <name>setXFineGain</name>
        <param>
          <type>int8_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad471fd5499dd2fbf730c066a8893420d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t MPU6050::getYFineGain</definition>
        <argsstring>()</argsstring>
        <name>getYFineGain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7f97e86dcfa1d491d8f809112c6fb40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setYFineGain</definition>
        <argsstring>(int8_t gain)</argsstring>
        <name>setYFineGain</name>
        <param>
          <type>int8_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a13c980e62e6e7774299fea1c827b6e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t MPU6050::getZFineGain</definition>
        <argsstring>()</argsstring>
        <name>getZFineGain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a98107dec68994cfc8c8cb1d0d78d2b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZFineGain</definition>
        <argsstring>(int8_t gain)</argsstring>
        <name>setZFineGain</name>
        <param>
          <type>int8_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1afdfe715ced419d117c2c47007d631f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getXAccelOffset</definition>
        <argsstring>()</argsstring>
        <name>getXAccelOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a447144e025f55b1dc96d7c209c5defd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setXAccelOffset</definition>
        <argsstring>(int16_t offset)</argsstring>
        <name>setXAccelOffset</name>
        <param>
          <type>int16_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7753d3c3f5d9e341f1ed0712079a0d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getYAccelOffset</definition>
        <argsstring>()</argsstring>
        <name>getYAccelOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="713" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a6214fa36c8881f3b02a3e7033678bfb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setYAccelOffset</definition>
        <argsstring>(int16_t offset)</argsstring>
        <name>setYAccelOffset</name>
        <param>
          <type>int16_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ac9a45355c735a09501b6a58c92fb752c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getZAccelOffset</definition>
        <argsstring>()</argsstring>
        <name>getZAccelOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="717" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4d1868b660d695eae912ef73407e21e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZAccelOffset</definition>
        <argsstring>(int16_t offset)</argsstring>
        <name>setZAccelOffset</name>
        <param>
          <type>int16_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a609a2c49b1ab075939e2e3d16694a7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getXGyroOffsetUser</definition>
        <argsstring>()</argsstring>
        <name>getXGyroOffsetUser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2306a15d278eab385af6ea0fd54c908a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setXGyroOffsetUser</definition>
        <argsstring>(int16_t offset)</argsstring>
        <name>setXGyroOffsetUser</name>
        <param>
          <type>int16_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ad3ae5fd84d0a125f65dd1e9f81acc636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getYGyroOffsetUser</definition>
        <argsstring>()</argsstring>
        <name>getYGyroOffsetUser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="725" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a8504811dc64bb338037ac7c098c86913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setYGyroOffsetUser</definition>
        <argsstring>(int16_t offset)</argsstring>
        <name>setYGyroOffsetUser</name>
        <param>
          <type>int16_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a66da03cd0df03c49ad942643482ece9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MPU6050::getZGyroOffsetUser</definition>
        <argsstring>()</argsstring>
        <name>getZGyroOffsetUser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1ada31a0757966357c75189f1cd13f0fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setZGyroOffsetUser</definition>
        <argsstring>(int16_t offset)</argsstring>
        <name>setZGyroOffsetUser</name>
        <param>
          <type>int16_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4d02c38682aa566b6204df3f81fbcb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntPLLReadyEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntPLLReadyEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aef44106927c1b986588f36bffaebea54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntPLLReadyEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntPLLReadyEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3af3f3c0a16b5b68cf6301cb0ac3f392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntDMPEnabled</definition>
        <argsstring>()</argsstring>
        <name>getIntDMPEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="735" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a889d29900cb0dd16e0199c13822f0f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setIntDMPEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setIntDMPEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a3a86756b7fe164e454f4801c30cdbffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPInt5Status</definition>
        <argsstring>()</argsstring>
        <name>getDMPInt5Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a9d406fd5027e7a6b0e33f5bfafc67627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPInt4Status</definition>
        <argsstring>()</argsstring>
        <name>getDMPInt4Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a1ac1a70c4d207c93359b43e743d34839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPInt3Status</definition>
        <argsstring>()</argsstring>
        <name>getDMPInt3Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="741" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1acaf41d1789aa02814af0319f71c57a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPInt2Status</definition>
        <argsstring>()</argsstring>
        <name>getDMPInt2Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a82a5a98ad80c69209ef0f423287b2f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPInt1Status</definition>
        <argsstring>()</argsstring>
        <name>getDMPInt1Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2b597f3f6b4188cbdb3feb2cd8dd3469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPInt0Status</definition>
        <argsstring>()</argsstring>
        <name>getDMPInt0Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a559de8cd420d329c93f215938e8483e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntPLLReadyStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntPLLReadyStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a715e66c52a2272b54782058772b50d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getIntDMPStatus</definition>
        <argsstring>()</argsstring>
        <name>getIntDMPStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a2a17e3062b1f321d260fd70f308c6a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::getDMPEnabled</definition>
        <argsstring>()</argsstring>
        <name>getDMPEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1abb6bf6db86b84700c7f13bd838d63755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setDMPEnabled</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setDMPEnabled</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a7a9706f177e84b295739198e6b2ded95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::resetDMP</definition>
        <argsstring>()</argsstring>
        <name>resetDMP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="753" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aa0c1753f6d2dacb1942fbef156a075bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMemoryBank</definition>
        <argsstring>(uint8_t bank, bool prefetchEnabled=false, bool userBank=false)</argsstring>
        <name>setMemoryBank</name>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prefetchEnabled</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>userBank</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a45013abb39103e858d432cc720bc351a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setMemoryStartAddress</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>setMemoryStartAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a4fb50ebcff2f4e686e3fbbafb70a1f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::readMemoryByte</definition>
        <argsstring>()</argsstring>
        <name>readMemoryByte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a20de45af9109402f0cfe785f8fdbf439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::writeMemoryByte</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>writeMemoryByte</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a04d8d5e7b62605aed15f07f52afa74ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::readMemoryBlock</definition>
        <argsstring>(uint8_t *data, uint16_t dataSize, uint8_t bank=0, uint8_t address=0)</argsstring>
        <name>readMemoryBlock</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aae135772b45e1c7968b55f4f01b3757f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::writeMemoryBlock</definition>
        <argsstring>(const uint8_t *data, uint16_t dataSize, uint8_t bank=0, uint8_t address=0, bool verify=true, bool useProgMem=false)</argsstring>
        <name>writeMemoryBlock</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>verify</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useProgMem</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a201dc0aa819f451584c575c5a7590e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::writeProgMemoryBlock</definition>
        <argsstring>(const uint8_t *data, uint16_t dataSize, uint8_t bank=0, uint8_t address=0, bool verify=true)</argsstring>
        <name>writeProgMemoryBlock</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>verify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1abe4f64f68164116b2ec94fe1d987929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::writeDMPConfigurationSet</definition>
        <argsstring>(const uint8_t *data, uint16_t dataSize, bool useProgMem=false)</argsstring>
        <name>writeDMPConfigurationSet</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useProgMem</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="768" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a160a3d018a81eb85a33874a43f44b3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MPU6050::writeProgDMPConfigurationSet</definition>
        <argsstring>(const uint8_t *data, uint16_t dataSize)</argsstring>
        <name>writeProgDMPConfigurationSet</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dataSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="769" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a421cdf4cea9fea87decbd69084ba4956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getDMPConfig1</definition>
        <argsstring>()</argsstring>
        <name>getDMPConfig1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a0126b95e4074de16bb61d9c4e4cf837f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setDMPConfig1</definition>
        <argsstring>(uint8_t config)</argsstring>
        <name>setDMPConfig1</name>
        <param>
          <type>uint8_t</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1a29594027f88c291708a38fba67c4ecd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MPU6050::getDMPConfig2</definition>
        <argsstring>()</argsstring>
        <name>getDMPConfig2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_m_p_u6050_1aea90c3e6a6666f070f7833a913cfa821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MPU6050::setDMPConfig2</definition>
        <argsstring>(uint8_t config)</argsstring>
        <name>setDMPConfig2</name>
        <param>
          <type>uint8_t</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/MPU6050/MPU6050.h" line="777" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="code/MPU6050/MPU6050.h" line="402" column="1" bodyfile="code/MPU6050/MPU6050.h" bodystart="402" bodyend="985"/>
    <listofallmembers>
      <member refid="class_m_p_u6050_1ad2000cad671bb7b293e26f2d463d4cea" prot="private" virt="non-virtual"><scope>MPU6050</scope><name>buffer</name></member>
      <member refid="class_m_p_u6050_1ad248bbf6e9da395ab67f7049b50ae474" prot="private" virt="non-virtual"><scope>MPU6050</scope><name>devAddr</name></member>
      <member refid="class_m_p_u6050_1a658dfc7e35b7fdba360a75f137bde33a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAcceleration</name></member>
      <member refid="class_m_p_u6050_1aa68475158c22128e5459c4c5e19439dc" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelerationX</name></member>
      <member refid="class_m_p_u6050_1a27240b90d3e03c85b7a619b794bb1756" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelerationY</name></member>
      <member refid="class_m_p_u6050_1acf5f5a20c10d99a1bdedf139f897bfdf" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelerationZ</name></member>
      <member refid="class_m_p_u6050_1aae903df2accc687423f9cd0a78f9cd32" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelerometerPowerOnDelay</name></member>
      <member refid="class_m_p_u6050_1ace244415128ad7a38293ad6808b7face" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a8fc7eab1302281f6e4bc953379f3237b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelXSelfTest</name></member>
      <member refid="class_m_p_u6050_1a2523e798db3baf9cb9dbf347af16639b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelYSelfTest</name></member>
      <member refid="class_m_p_u6050_1a57710638eeb6176cf14a8c444bda5300" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAccelZSelfTest</name></member>
      <member refid="class_m_p_u6050_1af6e9af8e2222889fd5458e2ae12c55c8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getAuxVDDIOLevel</name></member>
      <member refid="class_m_p_u6050_1ada96c33957bf20c04ca598a3537358ef" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getClockOutputEnabled</name></member>
      <member refid="class_m_p_u6050_1a8ed670258a805807b5102cdc5d0996a8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getClockSource</name></member>
      <member refid="class_m_p_u6050_1a35ae3c8894b3258e642043886801e031" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDeviceID</name></member>
      <member refid="class_m_p_u6050_1a4c3b84a906fcb5a65870fa557f797f4a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDHPFMode</name></member>
      <member refid="class_m_p_u6050_1a9f2737fe22955fd85b2575ba8da874c6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDLPFMode</name></member>
      <member refid="class_m_p_u6050_1a421cdf4cea9fea87decbd69084ba4956" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPConfig1</name></member>
      <member refid="class_m_p_u6050_1a29594027f88c291708a38fba67c4ecd5" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPConfig2</name></member>
      <member refid="class_m_p_u6050_1a2a17e3062b1f321d260fd70f308c6a06" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPEnabled</name></member>
      <member refid="class_m_p_u6050_1a2b597f3f6b4188cbdb3feb2cd8dd3469" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPInt0Status</name></member>
      <member refid="class_m_p_u6050_1a82a5a98ad80c69209ef0f423287b2f76" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPInt1Status</name></member>
      <member refid="class_m_p_u6050_1acaf41d1789aa02814af0319f71c57a9f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPInt2Status</name></member>
      <member refid="class_m_p_u6050_1a1ac1a70c4d207c93359b43e743d34839" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPInt3Status</name></member>
      <member refid="class_m_p_u6050_1a9d406fd5027e7a6b0e33f5bfafc67627" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPInt4Status</name></member>
      <member refid="class_m_p_u6050_1a3a86756b7fe164e454f4801c30cdbffe" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getDMPInt5Status</name></member>
      <member refid="class_m_p_u6050_1a902a7d486cd6ac21f8c378634dc6f59a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getExternalFrameSync</name></member>
      <member refid="class_m_p_u6050_1a7f786ab4264f40e5a95e8937ec9adcc2" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getExternalSensorByte</name></member>
      <member refid="class_m_p_u6050_1afd8983f0911e37015434bebc85185fb2" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getExternalSensorDWord</name></member>
      <member refid="class_m_p_u6050_1aaee15e48af7ba78660b5754f3bb5f37a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getExternalSensorWord</name></member>
      <member refid="class_m_p_u6050_1a0e5cb13838298609b5260fd1558f8c92" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getExternalShadowDelayEnabled</name></member>
      <member refid="class_m_p_u6050_1a7733011d30d5b64564f6b5422d8639ae" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFIFOByte</name></member>
      <member refid="class_m_p_u6050_1aba36dcb767b5cd8965053987aaa08a6a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFIFOBytes</name></member>
      <member refid="class_m_p_u6050_1ad96c7a75a39327ebaae01386bcbc58dd" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFIFOCount</name></member>
      <member refid="class_m_p_u6050_1ae2687a09ebe0d7fbbf74f560e0dd9a44" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1af6d6fa9869636989a8b29c4827ad7de8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFreefallDetectionCounterDecrement</name></member>
      <member refid="class_m_p_u6050_1a3cff6b9613ad01aa1a51c287f5c5e329" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFreefallDetectionDuration</name></member>
      <member refid="class_m_p_u6050_1ac7f5c0511fe9d0f3525a3757498daed7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFreefallDetectionThreshold</name></member>
      <member refid="class_m_p_u6050_1a4c01f9ab83b64dbbc6b62e658c3d3d9b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFSyncInterruptEnabled</name></member>
      <member refid="class_m_p_u6050_1a60fc85d4f27f99d07ffb9543d5e5f347" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFSyncInterruptLevel</name></member>
      <member refid="class_m_p_u6050_1a0fe2dad60c170cee7d614e08f243ffd0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFullScaleAccelRange</name></member>
      <member refid="class_m_p_u6050_1acb1fa088d43d76230106a3226f343013" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getFullScaleGyroRange</name></member>
      <member refid="class_m_p_u6050_1aed33db318a770d0020eb8b84058650f3" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getI2CBypassEnabled</name></member>
      <member refid="class_m_p_u6050_1a6b45e538f2082eb1b1975ed56e3e21bc" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getI2CMasterModeEnabled</name></member>
      <member refid="class_m_p_u6050_1ae15f6043a74c9c9bf9754824802ce8d3" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntDataReadyEnabled</name></member>
      <member refid="class_m_p_u6050_1ae4f434eb51a15b536e2e8f89a776872b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntDataReadyStatus</name></member>
      <member refid="class_m_p_u6050_1a3af3f3c0a16b5b68cf6301cb0ac3f392" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntDMPEnabled</name></member>
      <member refid="class_m_p_u6050_1a715e66c52a2272b54782058772b50d61" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntDMPStatus</name></member>
      <member refid="class_m_p_u6050_1a295c9600579557df065aff88bc7a1d83" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntEnabled</name></member>
      <member refid="class_m_p_u6050_1af66e6c7b1885dcf452e73371790fddfd" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getInterruptDrive</name></member>
      <member refid="class_m_p_u6050_1a5502c4c2a9bc4ea9267e128b7743923d" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getInterruptLatch</name></member>
      <member refid="class_m_p_u6050_1a9a098a607e20c64b60e155da35b8264f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getInterruptLatchClear</name></member>
      <member refid="class_m_p_u6050_1a58da1dfb39eb34e3a09a9b0bf4d87f29" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getInterruptMode</name></member>
      <member refid="class_m_p_u6050_1a55f99c88cc84901f245924ed5e3fe47e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntFIFOBufferOverflowEnabled</name></member>
      <member refid="class_m_p_u6050_1aa31427588f059c69d93ddb00ba257b12" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntFIFOBufferOverflowStatus</name></member>
      <member refid="class_m_p_u6050_1a500bb2df2e46eaecd3fb2ba7304a5ed3" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntFreefallEnabled</name></member>
      <member refid="class_m_p_u6050_1a06bbc2116235b7cc5e28c877e0576749" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntFreefallStatus</name></member>
      <member refid="class_m_p_u6050_1a282ae29e029d88604a59c92bdf9ce252" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntI2CMasterEnabled</name></member>
      <member refid="class_m_p_u6050_1a31d6c2b03fc2d6ce82d67d142f316851" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntI2CMasterStatus</name></member>
      <member refid="class_m_p_u6050_1a7de31a8e9f22765329d9f9e02db2f1f0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntMotionEnabled</name></member>
      <member refid="class_m_p_u6050_1ac0c0836aa0d237cac92d11591efd0d9f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntMotionStatus</name></member>
      <member refid="class_m_p_u6050_1a4d02c38682aa566b6204df3f81fbcb68" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntPLLReadyEnabled</name></member>
      <member refid="class_m_p_u6050_1a559de8cd420d329c93f215938e8483e2" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntPLLReadyStatus</name></member>
      <member refid="class_m_p_u6050_1a550a735623cb1de950c72cd6931ee804" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntStatus</name></member>
      <member refid="class_m_p_u6050_1ab3cc9bcaca6cec61e7f3f0c6c8a37db5" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntZeroMotionEnabled</name></member>
      <member refid="class_m_p_u6050_1afa73a5ffdc423736ae88702a469ba3a0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getIntZeroMotionStatus</name></member>
      <member refid="class_m_p_u6050_1acd775c72f85dabfc6f8fba43da096c6d" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getLostArbitration</name></member>
      <member refid="class_m_p_u6050_1a4cda448ef5c5736bd14188947342d636" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMasterClockSpeed</name></member>
      <member refid="class_m_p_u6050_1a574d3093dc131e4251a9b37adf208ca7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMotion6</name></member>
      <member refid="class_m_p_u6050_1aabfd2920e748016383e8124a4b32ad31" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMotion9</name></member>
      <member refid="class_m_p_u6050_1a0ed8de8eb440dbfdec829297527b0da6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMotionDetectionCounterDecrement</name></member>
      <member refid="class_m_p_u6050_1a8ba035c2ae4a05d7e51b0d29e4924fb0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMotionDetectionDuration</name></member>
      <member refid="class_m_p_u6050_1ab7a825b1b8b86cebda308289630795e7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMotionDetectionThreshold</name></member>
      <member refid="class_m_p_u6050_1aa88483068837bd9bc9c9f6c59a7a79b7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getMultiMasterEnabled</name></member>
      <member refid="class_m_p_u6050_1a6eb099e3dc96eb4d113cf81804256e8c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getOTPBankValid</name></member>
      <member refid="class_m_p_u6050_1af2820067b73f177d985ed81e894281b0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getPassthroughStatus</name></member>
      <member refid="class_m_p_u6050_1a887a173e079980505763ffd1aa9fec05" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getRate</name></member>
      <member refid="class_m_p_u6050_1a8ca85b87e7e0230921062fce7889b0d1" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getRotation</name></member>
      <member refid="class_m_p_u6050_1a268f52843a24992ff06a3f12392de584" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getRotationX</name></member>
      <member refid="class_m_p_u6050_1a97cbe7f10dd27e07bd78d1c25e4286b5" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getRotationY</name></member>
      <member refid="class_m_p_u6050_1ae0fee1ba996a2b6f914df6fc34e7da48" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getRotationZ</name></member>
      <member refid="class_m_p_u6050_1a9bc93f34bc3d85cbe6010b4a3a88c5a7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlate4InputByte</name></member>
      <member refid="class_m_p_u6050_1a6aa7aa2e3fac06f8b5ab9ee127255a5e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave0FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a74511edfcada3fb21c3327a0c846c72a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave0Nack</name></member>
      <member refid="class_m_p_u6050_1afd6a9b55a589c83c9a0fb0b5b2a88234" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave1FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a65cc9d75ff347b146414685fb83fa451" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave1Nack</name></member>
      <member refid="class_m_p_u6050_1a3c2e29508607a655221a2fa4f4219b4d" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave2FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1af4b5101dab501d6df2e0cae909120771" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave2Nack</name></member>
      <member refid="class_m_p_u6050_1a9d75ec63e2320ecfb84a2b082397f900" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave3FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a55f24d2f2b13d6e28a7c8b6bf2913520" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave3Nack</name></member>
      <member refid="class_m_p_u6050_1a4278dec5fec25be9a6f45b51a3373ad2" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4Address</name></member>
      <member refid="class_m_p_u6050_1a4b9e13d6776ba99e042773873557bedd" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4Enabled</name></member>
      <member refid="class_m_p_u6050_1a051549bcfa2eeb848c8557fc3efe74da" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4InterruptEnabled</name></member>
      <member refid="class_m_p_u6050_1a105aefe645e7021f9ba4397e9df4114c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4IsDone</name></member>
      <member refid="class_m_p_u6050_1a9a4585b3c9e61478db198011107a56a9" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4MasterDelay</name></member>
      <member refid="class_m_p_u6050_1ae9882b425cbdced4de325b608d896e10" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4Nack</name></member>
      <member refid="class_m_p_u6050_1a7bd548cb60ecceb27c72f026ec0a60f8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4Register</name></member>
      <member refid="class_m_p_u6050_1a8d5a5e73907c78960154b92656127372" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlave4WriteMode</name></member>
      <member refid="class_m_p_u6050_1af75b9f7ccac48515c7544238db0e6863" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveAddress</name></member>
      <member refid="class_m_p_u6050_1a54c2a48b3cb79106bcaf75accf6cd311" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveDataLength</name></member>
      <member refid="class_m_p_u6050_1ae84fd795630f9ab5e8d6b19a616a11ce" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveDelayEnabled</name></member>
      <member refid="class_m_p_u6050_1a5f14bde83fe00b27dec6776fc44e89c2" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveEnabled</name></member>
      <member refid="class_m_p_u6050_1a6b3c3aab80fcaa384303f9df2a59d7eb" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveReadWriteTransitionEnabled</name></member>
      <member refid="class_m_p_u6050_1ae7e9ead9645bcef326eb579c6ab5d5ff" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveRegister</name></member>
      <member refid="class_m_p_u6050_1a18e8f3d053a68f0e5ecf497c87ecac8a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveWordByteSwap</name></member>
      <member refid="class_m_p_u6050_1a32ce8023bb80afc5d55811de70c7214f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveWordGroupOffset</name></member>
      <member refid="class_m_p_u6050_1adb99955fa66300b1f0bedfcdd8187412" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSlaveWriteMode</name></member>
      <member refid="class_m_p_u6050_1a196404ef04b959083d4bf5e6f1cd8b98" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getSleepEnabled</name></member>
      <member refid="class_m_p_u6050_1a99261a04739fdb7a9a1c5b67ce3e710e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getStandbyXAccelEnabled</name></member>
      <member refid="class_m_p_u6050_1acb5fde4167aa54fbbe84706d577a48a6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getStandbyXGyroEnabled</name></member>
      <member refid="class_m_p_u6050_1a104f2ec438d745f8fdeec202bae09b48" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getStandbyYAccelEnabled</name></member>
      <member refid="class_m_p_u6050_1aaad2985f8d22aec123f1e1dabcdd427a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getStandbyYGyroEnabled</name></member>
      <member refid="class_m_p_u6050_1adae85612e047c4c7f0c3b7110fc92956" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getStandbyZAccelEnabled</name></member>
      <member refid="class_m_p_u6050_1a20f7804db1a980a3c425ae44c33d420b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getStandbyZGyroEnabled</name></member>
      <member refid="class_m_p_u6050_1aedfa4f1e6507f48c0a09545345a87875" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getTemperature</name></member>
      <member refid="class_m_p_u6050_1a913c2095001e204b5b09f8382a86d2ca" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getTempFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a31f588beab6760258212c65725eba336" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getTempSensorEnabled</name></member>
      <member refid="class_m_p_u6050_1a4e2ebda47b85b4c5463f041c790bf5c0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getWaitForExternalSensorEnabled</name></member>
      <member refid="class_m_p_u6050_1a89afc5235b9088c696e2cc7841f5259a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getWakeCycleEnabled</name></member>
      <member refid="class_m_p_u6050_1a249a905ae4572a462414f2d94236258a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getWakeFrequency</name></member>
      <member refid="class_m_p_u6050_1afdfe715ced419d117c2c47007d631f9e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXAccelOffset</name></member>
      <member refid="class_m_p_u6050_1a9c9332a5050be54fa47f321be01d524b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXFineGain</name></member>
      <member refid="class_m_p_u6050_1ada9a553176b57815f23fb7d71bb85c9d" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXGyroFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a4d71a79f90f97f8ea0f88825502789b8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXGyroOffset</name></member>
      <member refid="class_m_p_u6050_1a609a2c49b1ab075939e2e3d16694a7c1" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXGyroOffsetUser</name></member>
      <member refid="class_m_p_u6050_1a446d235905783c5b90637a6b6792ac76" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXNegMotionDetected</name></member>
      <member refid="class_m_p_u6050_1a410af58f5ff5f74e4ef8d61495908226" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getXPosMotionDetected</name></member>
      <member refid="class_m_p_u6050_1a7753d3c3f5d9e341f1ed0712079a0d12" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYAccelOffset</name></member>
      <member refid="class_m_p_u6050_1ad471fd5499dd2fbf730c066a8893420d" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYFineGain</name></member>
      <member refid="class_m_p_u6050_1a86c85d5b5c93df82394435b868e17463" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYGyroFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a829d38a14ad1096ea73ee628cdf03b53" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYGyroOffset</name></member>
      <member refid="class_m_p_u6050_1ad3ae5fd84d0a125f65dd1e9f81acc636" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYGyroOffsetUser</name></member>
      <member refid="class_m_p_u6050_1a6c45be7b4aa9081c83ee0f4081bf0827" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYNegMotionDetected</name></member>
      <member refid="class_m_p_u6050_1ad959ec84b9fe9f7e416b7af252f37abc" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getYPosMotionDetected</name></member>
      <member refid="class_m_p_u6050_1ac9a45355c735a09501b6a58c92fb752c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZAccelOffset</name></member>
      <member refid="class_m_p_u6050_1a384765351b5c4bd2b6efec9ed71ad1b7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZeroMotionDetected</name></member>
      <member refid="class_m_p_u6050_1a04c0fcdcd0157b6dbf74d4901424801e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZeroMotionDetectionDuration</name></member>
      <member refid="class_m_p_u6050_1ad941c1e844dc9230675c115734599ea3" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZeroMotionDetectionThreshold</name></member>
      <member refid="class_m_p_u6050_1a13c980e62e6e7774299fea1c827b6e7a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZFineGain</name></member>
      <member refid="class_m_p_u6050_1adbbbd131c74f37dd545403633eb317ff" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZGyroFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a62b2adfa117b435ec24b574d9821d01e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZGyroOffset</name></member>
      <member refid="class_m_p_u6050_1a66da03cd0df03c49ad942643482ece9e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZGyroOffsetUser</name></member>
      <member refid="class_m_p_u6050_1a3601b732eb15644212b8f29cf396e142" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZNegMotionDetected</name></member>
      <member refid="class_m_p_u6050_1a33c766cd415fc5780417b1ed76717875" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>getZPosMotionDetected</name></member>
      <member refid="class_m_p_u6050_1abd8fc6c18adf158011118fbccc7e7054" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>initialize</name></member>
      <member refid="class_m_p_u6050_1a7c0146d45537e4bd7a0d4c1c476fdab7" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>MPU6050</name></member>
      <member refid="class_m_p_u6050_1a94df4ec1565317ba5279122b3bf7e056" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>MPU6050</name></member>
      <member refid="class_m_p_u6050_1a04d8d5e7b62605aed15f07f52afa74ca" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>readMemoryBlock</name></member>
      <member refid="class_m_p_u6050_1a4fb50ebcff2f4e686e3fbbafb70a1f75" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>readMemoryByte</name></member>
      <member refid="class_m_p_u6050_1a7100b6d276c3c8664cf00d768b7b0dee" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>reset</name></member>
      <member refid="class_m_p_u6050_1a99ee74708c12f32e48ef5ec69ac9f4a9" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetAccelerometerPath</name></member>
      <member refid="class_m_p_u6050_1a7a9706f177e84b295739198e6b2ded95" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetDMP</name></member>
      <member refid="class_m_p_u6050_1aafa0dc38b7ea2acd1aecd5d9df8cbd08" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetFIFO</name></member>
      <member refid="class_m_p_u6050_1af1599c0d70f07fd3e28683d571842c22" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetGyroscopePath</name></member>
      <member refid="class_m_p_u6050_1a96332c394f1b7efd44c83a4ff690e732" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetI2CMaster</name></member>
      <member refid="class_m_p_u6050_1a9a271104d3302abc4af005c69a930094" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetSensors</name></member>
      <member refid="class_m_p_u6050_1a559c2d091d36a4e0489bc639916ddbb6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>resetTemperaturePath</name></member>
      <member refid="class_m_p_u6050_1a2bbde7653d2d2d37e16e515599f3b08b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setAccelerometerPowerOnDelay</name></member>
      <member refid="class_m_p_u6050_1afccbee85f5cdc95098f6d62d8d417c3f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setAccelFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1ac2ab843dc9d241056ed0f891195cdbf9" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setAccelXSelfTest</name></member>
      <member refid="class_m_p_u6050_1ad5847430ab297959e4d0e9b81ba2e3ba" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setAccelYSelfTest</name></member>
      <member refid="class_m_p_u6050_1a8eb8ba039af9a47e0475a3835b87f404" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setAccelZSelfTest</name></member>
      <member refid="class_m_p_u6050_1a7c666c20e26869bc80646f1b2c3d69bc" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setAuxVDDIOLevel</name></member>
      <member refid="class_m_p_u6050_1a71ec4642b6f6c937bbf6a24fea4179e5" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setClockOutputEnabled</name></member>
      <member refid="class_m_p_u6050_1a4c1cd147d038e024bdeaa053c4d77734" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setClockSource</name></member>
      <member refid="class_m_p_u6050_1a44cc43aaad1e52c1ba3142d4490af611" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setDHPFMode</name></member>
      <member refid="class_m_p_u6050_1a7a782ade8af2f88dfef7171487f59a3b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setDLPFMode</name></member>
      <member refid="class_m_p_u6050_1a0126b95e4074de16bb61d9c4e4cf837f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setDMPConfig1</name></member>
      <member refid="class_m_p_u6050_1aea90c3e6a6666f070f7833a913cfa821" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setDMPConfig2</name></member>
      <member refid="class_m_p_u6050_1abb6bf6db86b84700c7f13bd838d63755" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setDMPEnabled</name></member>
      <member refid="class_m_p_u6050_1a77b36f41c531a11b5a835fc75a9aefe6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setExternalFrameSync</name></member>
      <member refid="class_m_p_u6050_1a9160193d883871037c6535a9d3e02ee2" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setExternalShadowDelayEnabled</name></member>
      <member refid="class_m_p_u6050_1a66da5bc38aa82404117d1ef5306c951a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFIFOByte</name></member>
      <member refid="class_m_p_u6050_1a78e58ab27986db6999af775ed4d43091" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a18dd79b7c53600e9ce97eed4bfe6cf15" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFreefallDetectionCounterDecrement</name></member>
      <member refid="class_m_p_u6050_1a41eeb40a654465966d260e3d31c4de4b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFreefallDetectionDuration</name></member>
      <member refid="class_m_p_u6050_1af704e1a4eb01522b146abeba78c32716" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFreefallDetectionThreshold</name></member>
      <member refid="class_m_p_u6050_1a96aa409e02cdb7d3671890c70b44f167" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFSyncInterruptEnabled</name></member>
      <member refid="class_m_p_u6050_1a2b1c75cfc29e8ff8205f4ff33a426716" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFSyncInterruptLevel</name></member>
      <member refid="class_m_p_u6050_1a64eb78e8e359c541beaf8664db3421d1" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFullScaleAccelRange</name></member>
      <member refid="class_m_p_u6050_1a72afc0b6f221c9336f635b5637c62dae" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setFullScaleGyroRange</name></member>
      <member refid="class_m_p_u6050_1aa828160756a50f414aa3f5f5f0353c70" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setI2CBypassEnabled</name></member>
      <member refid="class_m_p_u6050_1a6503f0fdfefa0fd287a75032667b7b69" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setI2CMasterModeEnabled</name></member>
      <member refid="class_m_p_u6050_1a67a11be7fc7ab6b1186469b94ea33dda" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntDataReadyEnabled</name></member>
      <member refid="class_m_p_u6050_1a889d29900cb0dd16e0199c13822f0f88" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntDMPEnabled</name></member>
      <member refid="class_m_p_u6050_1ac7bcf24249dd5000320a8ec0ffe488c6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntEnabled</name></member>
      <member refid="class_m_p_u6050_1a9d9d6aeea346e6f6fad8e4a428cf3301" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setInterruptDrive</name></member>
      <member refid="class_m_p_u6050_1abf9ccf9eb6c7156e6660abb76734920a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setInterruptLatch</name></member>
      <member refid="class_m_p_u6050_1a2fa64c7030242aac18bd6727e8ca4a54" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setInterruptLatchClear</name></member>
      <member refid="class_m_p_u6050_1a003a098a1521c5ef4df50c0a8a2d47ab" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setInterruptMode</name></member>
      <member refid="class_m_p_u6050_1a83710a6b1e07f3b385239cc06f275cdb" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntFIFOBufferOverflowEnabled</name></member>
      <member refid="class_m_p_u6050_1a01a24a05f06463d5277e1670d6260e03" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntFreefallEnabled</name></member>
      <member refid="class_m_p_u6050_1af238656844a3727fa96a8d434b55473e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntI2CMasterEnabled</name></member>
      <member refid="class_m_p_u6050_1a2d2d1d3b03198a09c83a48ec3bc20bd8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntMotionEnabled</name></member>
      <member refid="class_m_p_u6050_1aef44106927c1b986588f36bffaebea54" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntPLLReadyEnabled</name></member>
      <member refid="class_m_p_u6050_1a5e36e3acace6e545718d7997169cff9b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setIntZeroMotionEnabled</name></member>
      <member refid="class_m_p_u6050_1a8a4779ea709ff0633f9798369478400b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMasterClockSpeed</name></member>
      <member refid="class_m_p_u6050_1aa0c1753f6d2dacb1942fbef156a075bc" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMemoryBank</name></member>
      <member refid="class_m_p_u6050_1a45013abb39103e858d432cc720bc351a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMemoryStartAddress</name></member>
      <member refid="class_m_p_u6050_1a74cc3ea727afa5d4406175085e60d08c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMotionDetectionCounterDecrement</name></member>
      <member refid="class_m_p_u6050_1a6d81616aaa47539217057891c91ff08f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMotionDetectionDuration</name></member>
      <member refid="class_m_p_u6050_1aa23c8d66502345c30915e69975fd2cc9" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMotionDetectionThreshold</name></member>
      <member refid="class_m_p_u6050_1a039f5724974c5bf3f373ed9be031441c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setMultiMasterEnabled</name></member>
      <member refid="class_m_p_u6050_1a074024a7818b2998b3f1c99064bea3a0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setOTPBankValid</name></member>
      <member refid="class_m_p_u6050_1a7d03801d6b656e8e12cd3c1dd97824a8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setRate</name></member>
      <member refid="class_m_p_u6050_1a97fbf27e1b827f9dfc3c28ff376b54c4" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave0FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a5d432fa2fb8b2227f50aa5c7b5befb66" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave1FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a38a10ac4f30b96718ec021dc0db8587b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave2FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a6ed713870c7f6d085ded91a45515a36c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave3FIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a6985da2cbc37be3fefbe3c16bf8d34a6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4Address</name></member>
      <member refid="class_m_p_u6050_1a04be2a8c3af6ef174f97769b9b5164a9" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4Enabled</name></member>
      <member refid="class_m_p_u6050_1a7d7498ebc26f8a1fe8c9dcf40cd5d265" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4InterruptEnabled</name></member>
      <member refid="class_m_p_u6050_1ac154934a43c599cdc564fb29c22c45eb" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4MasterDelay</name></member>
      <member refid="class_m_p_u6050_1a17147a6f477be79f58889e9e6329392f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4OutputByte</name></member>
      <member refid="class_m_p_u6050_1ae54dc358da048e61a1ac68012300fdaa" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4Register</name></member>
      <member refid="class_m_p_u6050_1af1402fe7f3e1cc0dedb6714351cbca4e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlave4WriteMode</name></member>
      <member refid="class_m_p_u6050_1a3c07eb2c59fff3ddc7186319ee40ba6f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveAddress</name></member>
      <member refid="class_m_p_u6050_1ab4151353f433c533246d938fc3b78458" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveDataLength</name></member>
      <member refid="class_m_p_u6050_1a471929d7cf9049357c345633d22412a9" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveDelayEnabled</name></member>
      <member refid="class_m_p_u6050_1afaffa021d7bb41f3a288827080602eee" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveEnabled</name></member>
      <member refid="class_m_p_u6050_1a34a1def575f6abcd464afe954de8a461" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveOutputByte</name></member>
      <member refid="class_m_p_u6050_1a3413efbf2f4e8a27aa8768d9bc34d663" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveReadWriteTransitionEnabled</name></member>
      <member refid="class_m_p_u6050_1a62851e982059a2462d52c210ad764a1c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveRegister</name></member>
      <member refid="class_m_p_u6050_1abeb1f83652066d7543fd3283af794364" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveWordByteSwap</name></member>
      <member refid="class_m_p_u6050_1a32602ab86f70b70d3313628fc6c010ae" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveWordGroupOffset</name></member>
      <member refid="class_m_p_u6050_1a3d9bfcb5394c7a382009cd2dc91ce801" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSlaveWriteMode</name></member>
      <member refid="class_m_p_u6050_1a15ec5f8e7daf235f507c1d8b96af051a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setSleepEnabled</name></member>
      <member refid="class_m_p_u6050_1af4df87fd2e87f41d06706cfd5bbc2a2c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setStandbyXAccelEnabled</name></member>
      <member refid="class_m_p_u6050_1ac1c6d8f623a9ca00a4ddc50f6615b977" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setStandbyXGyroEnabled</name></member>
      <member refid="class_m_p_u6050_1a7ce7d3299479eb66518acf0697132835" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setStandbyYAccelEnabled</name></member>
      <member refid="class_m_p_u6050_1ab0973d64b7132188539b07991f7ea1f0" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setStandbyYGyroEnabled</name></member>
      <member refid="class_m_p_u6050_1ac5fd917549d2ed0f12b8a17167271199" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setStandbyZAccelEnabled</name></member>
      <member refid="class_m_p_u6050_1ada7c8a873fe157703dcdc08e25b48e32" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setStandbyZGyroEnabled</name></member>
      <member refid="class_m_p_u6050_1ae528a25b4997ad0e3091a012e4e4419e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setTempFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a0113871802e88c80fe69ce1f607987ff" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setTempSensorEnabled</name></member>
      <member refid="class_m_p_u6050_1a20dc4bdedbe1550580c28a6d090291be" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setWaitForExternalSensorEnabled</name></member>
      <member refid="class_m_p_u6050_1a340eade71cf6286f6904c2021330944e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setWakeCycleEnabled</name></member>
      <member refid="class_m_p_u6050_1a62495e89f4787e6b18f0f795cef2b7cd" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setWakeFrequency</name></member>
      <member refid="class_m_p_u6050_1a447144e025f55b1dc96d7c209c5defd6" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setXAccelOffset</name></member>
      <member refid="class_m_p_u6050_1a73d4473d134cf5f7c516ff38faa2b4a8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setXFineGain</name></member>
      <member refid="class_m_p_u6050_1a53a03d1f255a62f01375c870cdc85767" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setXGyroFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1ad0c66eb7f77ab0ef19fca7124c63ba9d" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setXGyroOffset</name></member>
      <member refid="class_m_p_u6050_1a2306a15d278eab385af6ea0fd54c908a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setXGyroOffsetUser</name></member>
      <member refid="class_m_p_u6050_1a6214fa36c8881f3b02a3e7033678bfb3" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setYAccelOffset</name></member>
      <member refid="class_m_p_u6050_1a7f97e86dcfa1d491d8f809112c6fb40b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setYFineGain</name></member>
      <member refid="class_m_p_u6050_1a16eb12bbf07bc17a9d852941d834175e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setYGyroFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a7f547a52a20bc1ebb23faa1e6668bff1" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setYGyroOffset</name></member>
      <member refid="class_m_p_u6050_1a8504811dc64bb338037ac7c098c86913" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setYGyroOffsetUser</name></member>
      <member refid="class_m_p_u6050_1a4d1868b660d695eae912ef73407e21e8" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZAccelOffset</name></member>
      <member refid="class_m_p_u6050_1a6d25a21e1673682f096399b719c66d2c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZeroMotionDetectionDuration</name></member>
      <member refid="class_m_p_u6050_1a347a51fd25de20b9ead4659015ef793b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZeroMotionDetectionThreshold</name></member>
      <member refid="class_m_p_u6050_1a98107dec68994cfc8c8cb1d0d78d2b6b" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZFineGain</name></member>
      <member refid="class_m_p_u6050_1af5b5bc39b66466ba910f6eef1259444c" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZGyroFIFOEnabled</name></member>
      <member refid="class_m_p_u6050_1a20dbe1fac22c021fb3228522aea5c96e" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZGyroOffset</name></member>
      <member refid="class_m_p_u6050_1ada31a0757966357c75189f1cd13f0fee" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>setZGyroOffsetUser</name></member>
      <member refid="class_m_p_u6050_1a269710b7bca814bbf67e7bb38c381650" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>switchSPIEnabled</name></member>
      <member refid="class_m_p_u6050_1a95ffab7b44fce3834236e0813687d11a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>testConnection</name></member>
      <member refid="class_m_p_u6050_1abe4f64f68164116b2ec94fe1d987929a" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>writeDMPConfigurationSet</name></member>
      <member refid="class_m_p_u6050_1aae135772b45e1c7968b55f4f01b3757f" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>writeMemoryBlock</name></member>
      <member refid="class_m_p_u6050_1a20de45af9109402f0cfe785f8fdbf439" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>writeMemoryByte</name></member>
      <member refid="class_m_p_u6050_1a160a3d018a81eb85a33874a43f44b3ea" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>writeProgDMPConfigurationSet</name></member>
      <member refid="class_m_p_u6050_1a201dc0aa819f451584c575c5a7590e10" prot="public" virt="non-virtual"><scope>MPU6050</scope><name>writeProgMemoryBlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
