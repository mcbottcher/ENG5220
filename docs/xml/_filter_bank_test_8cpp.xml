<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_filter_bank_test_8cpp" kind="file" language="C++">
    <compoundname>FilterBankTest.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">fstream</includes>
    <includes refid="_filter_bank_8cpp" local="yes">../code/FilterBank.cpp</includes>
    <incdepgraph>
      <node id="554">
        <label>testfiles/FilterBankTest.cpp</label>
        <link refid="_filter_bank_test_8cpp"/>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
      </node>
      <node id="558">
        <label>../code/FilterBank.cpp</label>
        <link refid="_filter_bank_8cpp"/>
        <childnode refid="559" relation="include">
        </childnode>
      </node>
      <node id="556">
        <label>string</label>
      </node>
      <node id="557">
        <label>fstream</label>
      </node>
      <node id="560">
        <label>Iir.h</label>
      </node>
      <node id="559">
        <label>FilterBank.h</label>
        <link refid="_filter_bank_8h"/>
        <childnode refid="560" relation="include">
        </childnode>
      </node>
      <node id="555">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_filter_bank_test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="testfiles/FilterBankTest.cpp" line="9" column="1" bodyfile="testfiles/FilterBankTest.cpp" bodystart="9" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../code/FilterBank.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="_filter_bank_test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_filter_bank_test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>(){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberfilters<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>filters<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orderfilters<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>of<sp/>filters<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecreatesines_1a81f9c9d4665e4c02dbbc7228bb0f0c83" kindref="member">fs</ref><sp/>=<sp/>500;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sample<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbersamples<sp/>=<sp/>500;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fc[numberfilters]<sp/>=<sp/>{10,50,150,200};<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>fequency<sp/>cutoffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecreatesines_1a2fb2853971bafed636e0149fab0018e0" kindref="member">samples</ref>[numbersamples];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>sample<sp/>input<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesout[numberfilters][numbersamples];</highlight><highlight class="comment">//<sp/>setup<sp/>sample<sp/>output<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>the<sp/>samples<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>file(</highlight><highlight class="stringliteral">&quot;testdata/sin.bin&quot;</highlight><highlight class="normal">,<sp/>ios::in<sp/>|<sp/>ios::binary);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>file.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacecreatesines_1a2fb2853971bafed636e0149fab0018e0" kindref="member">samples</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>instance<sp/>of<sp/>filterbank<sp/>with<sp/>array<sp/>of<sp/>cutoff<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_bank" kindref="compound">FilterBank</ref><sp/>filt(numberfilters,orderfilters,<sp/><ref refid="namespacecreatesines_1a81f9c9d4665e4c02dbbc7228bb0f0c83" kindref="member">fs</ref>,<sp/>fc);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>filt.<ref refid="class_filter_bank_1ad95fe17a4040bf978ad977a37ce3a868" kindref="member">setup</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>the<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numbersamples;<sp/>i++){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespaceattempt1_1a5d26d562c132123e902e42986ffa3cc6" kindref="member">temp</ref><sp/>=<sp/>filt.<ref refid="class_filter_bank_1a09881ea60cd2c2d21c29b3c599ef2c0b" kindref="member">filter</ref>(<ref refid="namespacecreatesines_1a2fb2853971bafed636e0149fab0018e0" kindref="member">samples</ref>[i]);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>samples<sp/>in<sp/>output<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=0;<sp/>j&lt;numberfilters;<sp/>j++){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samplesout[j][i]<sp/>=<sp/><ref refid="namespaceattempt1_1a5d26d562c132123e902e42986ffa3cc6" kindref="member">temp</ref>[j];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//save<sp/>the<sp/>filtered<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>myfile0<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/filtered0.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>myfile0.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(samplesout[0]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>myfile1<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/filtered1.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>myfile1.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(samplesout[1]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>myfile2<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/filtered2.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>myfile2.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(samplesout[2]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>myfile3<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/filtered3.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>myfile3.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(samplesout[3]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filter_bank" kindref="compound">FilterBank</ref><sp/>f(numberfilters,orderfilters,<sp/><ref refid="namespacecreatesines_1a81f9c9d4665e4c02dbbc7228bb0f0c83" kindref="member">fs</ref>,<sp/>fc);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="class_filter_bank_1ad95fe17a4040bf978ad977a37ce3a868" kindref="member">setup</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impulseresponse[numberfilters][numbersamples];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>the<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numbersamples;i++)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a=0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==10)<sp/>{a<sp/>=<sp/>1;}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespaceattempt1_1a5d26d562c132123e902e42986ffa3cc6" kindref="member">temp</ref><sp/>=<sp/>f.<ref refid="class_filter_bank_1a09881ea60cd2c2d21c29b3c599ef2c0b" kindref="member">filter</ref>(a);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;numberfilters;<sp/>j++){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseresponse[j][i]<sp/>=<sp/><ref refid="namespaceattempt1_1a5d26d562c132123e902e42986ffa3cc6" kindref="member">temp</ref>[j];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>impulse0<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/impulse0.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>impulse0.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(impulseresponse[0]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>impulse1<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/impulse1.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>impulse1.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(impulseresponse[1]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>impulse2<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/impulse2.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>impulse2.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(impulseresponse[2]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>impulse3<sp/>(</highlight><highlight class="stringliteral">&quot;testdata/impulse3.bin&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacecreatesines_1a8477e86d34388cffabe6aec83f9ca2d8" kindref="member">ios::out</ref><sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>impulse3.write(reinterpret_cast<sp/>&lt;char*&gt;<sp/>(impulseresponse[3]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*numbersamples);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="testfiles/FilterBankTest.cpp"/>
  </compounddef>
</doxygen>
