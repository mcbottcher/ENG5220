<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_cpp_timer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>CppTimer</compoundname>
    <derivedcompoundref refid="class_cpp_timer_callback" prot="public" virt="non-virtual">CppTimerCallback</derivedcompoundref>
    <derivedcompoundref refid="class_demo_timer1" prot="public" virt="non-virtual">DemoTimer1</derivedcompoundref>
    <derivedcompoundref refid="class_demo_timer1" prot="public" virt="non-virtual">DemoTimer1</derivedcompoundref>
    <derivedcompoundref refid="class_demo_timer1" prot="public" virt="non-virtual">DemoTimer1</derivedcompoundref>
    <derivedcompoundref refid="class_demo_timer2" prot="public" virt="non-virtual">DemoTimer2</derivedcompoundref>
    <derivedcompoundref refid="class_demo_timer2" prot="public" virt="non-virtual">DemoTimer2</derivedcompoundref>
    <derivedcompoundref refid="class_sample_timer" prot="public" virt="non-virtual">SampleTimer</derivedcompoundref>
    <derivedcompoundref refid="class_ticker" prot="public" virt="non-virtual">Ticker</derivedcompoundref>
    <derivedcompoundref refid="class_timer" prot="public" virt="non-virtual">Timer</derivedcompoundref>
    <includes refid="_cpp_timer_8h" local="no">CppTimer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_cpp_timer_1a90ff764263fdde5a0f6e53429c8cf734" prot="private" static="no" mutable="no">
        <type>timer_t</type>
        <definition>timer_t CppTimer::timerid</definition>
        <argsstring></argsstring>
        <name>timerid</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="73" column="1" bodyfile="code/cppTimer/CppTimer.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cpp_timer_1a9860d3d723ad55982db50c9cde8d725a" prot="private" static="no" mutable="no">
        <type>struct sigevent</type>
        <definition>struct sigevent CppTimer::sev</definition>
        <argsstring></argsstring>
        <name>sev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="73" column="1" bodyfile="code/cppTimer/CppTimer.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cpp_timer_1a692a200df6d2c43b72ff1db76458f09f" prot="private" static="no" mutable="no">
        <type>struct sigaction</type>
        <definition>struct sigaction CppTimer::sa</definition>
        <argsstring></argsstring>
        <name>sa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="73" column="1" bodyfile="code/cppTimer/CppTimer.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cpp_timer_1a8774fb5ba9af8f276874c1234741f106" prot="private" static="no" mutable="no">
        <type>struct itimerspec</type>
        <definition>struct itimerspec CppTimer::its</definition>
        <argsstring></argsstring>
        <name>its</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="73" column="1" bodyfile="code/cppTimer/CppTimer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cpp_timer_1a327a07c051b9b60fcc61e6fd8f40f381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CppTimer::CppTimer</definition>
        <argsstring>()</argsstring>
        <name>CppTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of the timer and connects the signal handler to the timer.</para>
<para>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</para>
<para>(C) 2020, Bernd Porr <ulink url="mailto:mail@bernporr.me.uk">mail@bernporr.me.uk</ulink></para>
<para>This is inspired by the timer_create man page. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="42" column="1" bodyfile="code/cppTimer/CppTimer.cpp" bodystart="12" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_cpp_timer_1a64989025caa3c030c6c397ca76a2d20b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppTimer::start</definition>
        <argsstring>(long nanosecs, cppTimerType_t type=PERIODIC)</argsstring>
        <name>start</name>
        <param>
          <type>long</type>
          <declname>nanosecs</declname>
        </param>
        <param>
          <type><ref refid="_cpp_timer_8h_1a110d07ab6a96d7815149d3d95435790a" kindref="member">cppTimerType_t</ref></type>
          <declname>type</declname>
          <defval><ref refid="_cpp_timer_8h_1a110d07ab6a96d7815149d3d95435790aae4379d044711537d9ce3b3b58c575c58" kindref="member">PERIODIC</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts the timer. The timer fires first after the specified time in nanoseconds and then at that interval in PERIODIC mode. In ONESHOT mode the timer fires once after the specified time in nanoseconds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="51" column="1" bodyfile="code/cppTimer/CppTimer.cpp" bodystart="31" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_cpp_timer_1a4bb95ddee98a536d0818b8f6096bf7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CppTimer::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stops the timer by disarming it. It can be re-started with <ref refid="class_cpp_timer_1a64989025caa3c030c6c397ca76a2d20b" kindref="member">start()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="57" column="1" bodyfile="code/cppTimer/CppTimer.cpp" bodystart="52" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_cpp_timer_1a91779a93fce7383a8d832ed481399342" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>CppTimer::~CppTimer</definition>
        <argsstring>()</argsstring>
        <name>~CppTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor disarms the timer, deletes it and disconnect the signal handler. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="63" column="1" bodyfile="code/cppTimer/CppTimer.cpp" bodystart="62" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_cpp_timer_1ac2665403595b6aee5f581d0ebfeb886c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CppTimer::timerEvent</definition>
        <argsstring>()=0</argsstring>
        <name>timerEvent</name>
        <reimplementedby refid="class_demo_timer1_1a2e9fe735ff1660ab322b11831970f44a">timerEvent</reimplementedby>
        <reimplementedby refid="class_demo_timer1_1a2e9fe735ff1660ab322b11831970f44a">timerEvent</reimplementedby>
        <reimplementedby refid="class_demo_timer1_1a2e9fe735ff1660ab322b11831970f44a">timerEvent</reimplementedby>
        <reimplementedby refid="class_demo_timer2_1a8e5183f647e8f8c1cdebbfdf4c46b206">timerEvent</reimplementedby>
        <reimplementedby refid="class_cpp_timer_callback_1af6b39f5eb8e98bfc1b301ac3f25276e9">timerEvent</reimplementedby>
        <reimplementedby refid="class_demo_timer2_1a8e5183f647e8f8c1cdebbfdf4c46b206">timerEvent</reimplementedby>
        <reimplementedby refid="class_sample_timer_1aeb8b390f578e49bf74cc93bd901d29ae">timerEvent</reimplementedby>
        <reimplementedby refid="class_ticker_1ad8f13d067d028448dc8f6fa3dcab532c">timerEvent</reimplementedby>
        <reimplementedby refid="class_timer_1a76d40cc2816da1521102b34427635e3e">timerEvent</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abstract function which needs to be implemented by the children. This is called every time the timer fires. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="70" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_cpp_timer_1a7cf621a640ea9a1e567ee295c7255b5d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void CppTimer::handler</definition>
        <argsstring>(int sig, siginfo_t *si, void *uc)</argsstring>
        <name>handler</name>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>siginfo_t *</type>
          <declname>si</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>uc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/cppTimer/CppTimer.h" line="78" column="1" bodyfile="code/cppTimer/CppTimer.h" bodystart="78" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_timer" kindref="compound">Timer</ref> class which repeatedly fires. It&apos;s wrapper around the POSIX per-process timer. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="11">
        <label>CppTimerCallback</label>
        <link refid="class_cpp_timer_callback"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>Ticker</label>
        <link refid="class_ticker"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>CppTimer</label>
        <link refid="class_cpp_timer"/>
      </node>
      <node id="12">
        <label>DemoTimer1</label>
        <link refid="class_demo_timer1"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>DemoTimer2</label>
        <link refid="class_demo_timer2"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>Timer</label>
        <link refid="class_timer"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>SampleTimer</label>
        <link refid="class_sample_timer"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="code/cppTimer/CppTimer.h" line="35" column="1" bodyfile="code/cppTimer/CppTimer.h" bodystart="35" bodyend="81"/>
    <listofallmembers>
      <member refid="class_cpp_timer_1a327a07c051b9b60fcc61e6fd8f40f381" prot="public" virt="non-virtual"><scope>CppTimer</scope><name>CppTimer</name></member>
      <member refid="class_cpp_timer_1a7cf621a640ea9a1e567ee295c7255b5d" prot="private" virt="non-virtual"><scope>CppTimer</scope><name>handler</name></member>
      <member refid="class_cpp_timer_1a8774fb5ba9af8f276874c1234741f106" prot="private" virt="non-virtual"><scope>CppTimer</scope><name>its</name></member>
      <member refid="class_cpp_timer_1a692a200df6d2c43b72ff1db76458f09f" prot="private" virt="non-virtual"><scope>CppTimer</scope><name>sa</name></member>
      <member refid="class_cpp_timer_1a9860d3d723ad55982db50c9cde8d725a" prot="private" virt="non-virtual"><scope>CppTimer</scope><name>sev</name></member>
      <member refid="class_cpp_timer_1a64989025caa3c030c6c397ca76a2d20b" prot="public" virt="virtual"><scope>CppTimer</scope><name>start</name></member>
      <member refid="class_cpp_timer_1a4bb95ddee98a536d0818b8f6096bf7e7" prot="public" virt="virtual"><scope>CppTimer</scope><name>stop</name></member>
      <member refid="class_cpp_timer_1ac2665403595b6aee5f581d0ebfeb886c" prot="protected" virt="pure-virtual"><scope>CppTimer</scope><name>timerEvent</name></member>
      <member refid="class_cpp_timer_1a90ff764263fdde5a0f6e53429c8cf734" prot="private" virt="non-virtual"><scope>CppTimer</scope><name>timerid</name></member>
      <member refid="class_cpp_timer_1a91779a93fce7383a8d832ed481399342" prot="public" virt="virtual"><scope>CppTimer</scope><name>~CppTimer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
