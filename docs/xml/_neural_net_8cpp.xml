<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_neural_net_8cpp" kind="file" language="C++">
    <compoundname>NeuralNet.cpp</compoundname>
    <includes refid="_neural_net_8h" local="yes">NeuralNet.h</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="102">
        <label>code/neuralnet_predict/NeuralNet.cpp</label>
        <link refid="_neural_net_8cpp"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>fdeep/fdeep.hpp</label>
      </node>
      <node id="105">
        <label>vector</label>
      </node>
      <node id="103">
        <label>NeuralNet.h</label>
        <link refid="_neural_net_8h"/>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>main.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_neural_net_8h" kindref="compound">NeuralNet.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_neural_net_1a66b1ddd47bc5b393cf184f02517e82d4" refkind="member"><highlight class="normal"><ref refid="class_neural_net_1a66b1ddd47bc5b393cf184f02517e82d4" kindref="member">NeuralNet::NeuralNet</ref>(){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_neural_net_1afd68e306bdf39aaa8c6ef016e4da18a1" refkind="member"><highlight class="normal"><ref refid="class_neural_net_1afd68e306bdf39aaa8c6ef016e4da18a1" kindref="member">NeuralNet::~NeuralNet</ref>(){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_neural_net_1a5847c3d58230e3f5df8598a6f8b0bceb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_neural_net_1a5847c3d58230e3f5df8598a6f8b0bceb" kindref="member">NeuralNet::predict</ref>(){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>_model.predict({fdeep::tensor(fdeep::tensor_shape(static_cast&lt;std::size_t&gt;(220)),{netInputs[0][0],netInputs[0][1],netInputs[0][2],netInputs[0][3],netInputs[0][4],netInputs[0][5],netInputs[0][6],netInputs[0][7],netInputs[0][8],netInputs[0][9],netInputs[0][10],netInputs[0][11],netInputs[0][12],netInputs[0][13],netInputs[0][14],netInputs[0][15],netInputs[0][16],netInputs[0][17],netInputs[0][18],netInputs[0][19],netInputs[1][0],netInputs[1][1],netInputs[1][2],netInputs[1][3],netInputs[1][4],netInputs[1][5],netInputs[1][6],netInputs[1][7],netInputs[1][8],netInputs[1][9],netInputs[1][10],netInputs[1][11],netInputs[1][12],netInputs[1][13],netInputs[1][14],netInputs[1][15],netInputs[1][16],netInputs[1][17],netInputs[1][18],netInputs[1][19],netInputs[2][0],netInputs[2][1],netInputs[2][2],netInputs[2][3],netInputs[2][4],netInputs[2][5],netInputs[2][6],netInputs[2][7],netInputs[2][8],netInputs[2][9],netInputs[2][10],netInputs[2][11],netInputs[2][12],netInputs[2][13],netInputs[2][14],netInputs[2][15],netInputs[2][16],netInputs[2][17],netInputs[2][18],netInputs[2][19],netInputs[3][0],netInputs[3][1],netInputs[3][2],netInputs[3][3],netInputs[3][4],netInputs[3][5],netInputs[3][6],netInputs[3][7],netInputs[3][8],netInputs[3][9],netInputs[3][10],netInputs[3][11],netInputs[3][12],netInputs[3][13],netInputs[3][14],netInputs[3][15],netInputs[3][16],netInputs[3][17],netInputs[3][18],netInputs[3][19],netInputs[4][0],netInputs[4][1],netInputs[4][2],netInputs[4][3],netInputs[4][4],netInputs[4][5],netInputs[4][6],netInputs[4][7],netInputs[4][8],netInputs[4][9],netInputs[4][10],netInputs[4][11],netInputs[4][12],netInputs[4][13],netInputs[4][14],netInputs[4][15],netInputs[4][16],netInputs[4][17],netInputs[4][18],netInputs[4][19],netInputs[5][0],netInputs[5][1],netInputs[5][2],netInputs[5][3],netInputs[5][4],netInputs[5][5],netInputs[5][6],netInputs[5][7],netInputs[5][8],netInputs[5][9],netInputs[5][10],netInputs[5][11],netInputs[5][12],netInputs[5][13],netInputs[5][14],netInputs[5][15],netInputs[5][16],netInputs[5][17],netInputs[5][18],netInputs[5][19],netInputs[6][0],netInputs[6][1],netInputs[6][2],netInputs[6][3],netInputs[6][4],netInputs[6][5],netInputs[6][6],netInputs[6][7],netInputs[6][8],netInputs[6][9],netInputs[6][10],netInputs[6][11],netInputs[6][12],netInputs[6][13],netInputs[6][14],netInputs[6][15],netInputs[6][16],netInputs[6][17],netInputs[6][18],netInputs[6][19],netInputs[7][0],netInputs[7][1],netInputs[7][2],netInputs[7][3],netInputs[7][4],netInputs[7][5],netInputs[7][6],netInputs[7][7],netInputs[7][8],netInputs[7][9],netInputs[7][10],netInputs[7][11],netInputs[7][12],netInputs[7][13],netInputs[7][14],netInputs[7][15],netInputs[7][16],netInputs[7][17],netInputs[7][18],netInputs[7][19],netInputs[8][0],netInputs[8][1],netInputs[8][2],netInputs[8][3],netInputs[8][4],netInputs[8][5],netInputs[8][6],netInputs[8][7],netInputs[8][8],netInputs[8][9],netInputs[8][10],netInputs[8][11],netInputs[8][12],netInputs[8][13],netInputs[8][14],netInputs[8][15],netInputs[8][16],netInputs[8][17],netInputs[8][18],netInputs[8][19],netInputs[9][0],netInputs[9][1],netInputs[9][2],netInputs[9][3],netInputs[9][4],netInputs[9][5],netInputs[9][6],netInputs[9][7],netInputs[9][8],netInputs[9][9],netInputs[9][10],netInputs[9][11],netInputs[9][12],netInputs[9][13],netInputs[9][14],netInputs[9][15],netInputs[9][16],netInputs[9][17],netInputs[9][18],netInputs[9][19],netInputs[10][0],netInputs[10][1],netInputs[10][2],netInputs[10][3],netInputs[10][4],netInputs[10][5],netInputs[10][6],netInputs[10][7],netInputs[10][8],netInputs[10][9],netInputs[10][10],netInputs[10][11],netInputs[10][12],netInputs[10][13],netInputs[10][14],netInputs[10][15],netInputs[10][16],netInputs[10][17],netInputs[10][18],netInputs[10][19]})});</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>fdeep::show_tensors(result)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_neural_net_1a7886a708a90f398259221e5a9f9e1a65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_neural_net_1a7886a708a90f398259221e5a9f9e1a65" kindref="member">NeuralNet::insertSamples</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>sampleBuff){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="_neural_net_8h_1a00ad6a3a94ffdd1bc6b55e789f9dfda9" kindref="member">NUMBER_OF_ROWS</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>rowptr<sp/>=<sp/>&amp;netInputs[i][0];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(&amp;rowptr[0],&amp;rowptr[1],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)*(<ref refid="_neural_net_8h_1a0240364487a54a70da4ffb51459ada98" kindref="member">NUMBER_OF_COLUMNS</ref>-1));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr[19]<sp/>=<sp/>sampleBuff[i];<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="code/neuralnet_predict/NeuralNet.cpp"/>
  </compounddef>
</doxygen>
